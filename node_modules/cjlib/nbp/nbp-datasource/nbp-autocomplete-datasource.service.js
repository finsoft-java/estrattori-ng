var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { INbpAutocompleteDataSource } from './nbp-datasource.interfaces';
import { getPropertyValueByPath } from './../../utility/lib-utility';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/of';
var NbpAutocompleteDatasource = (function (_super) {
    __extends(NbpAutocompleteDatasource, _super);
    function NbpAutocompleteDatasource(arrayData, defaultPageSize) {
        var _this = _super.call(this) || this;
        _this.defaultPageSize = defaultPageSize;
        _this.arrayData = arrayData ? arrayData : [];
        return _this;
    }
    NbpAutocompleteDatasource.prototype.getPage = function (filterFields, filterString) {
        var shadowData = this.arrayData.slice();
        /*let currentPageSize = pageSize ? pageSize : (this.defaultPageSize ? this.defaultPageSize : this.arrayData.length);
        let pageToreturn = pageNumber ? pageNumber : 1;
        let start = (pageToreturn - 1) * currentPageSize;
        let end = start + currentPageSize;
    
        let data = shadowData.slice(start, end);*/
        var data = shadowData.filter(function (element) {
            var result = false;
            var propertyData = getPropertyValueByPath(element, filterFields);
            if (!!propertyData) {
                result = propertyData.toLowerCase().startsWith(filterString.toLowerCase());
            }
            return result;
        });
        var dataPage = {
            data: data
        };
        return Observable.of(dataPage);
    };
    return NbpAutocompleteDatasource;
}(INbpAutocompleteDataSource));
export { NbpAutocompleteDatasource };
