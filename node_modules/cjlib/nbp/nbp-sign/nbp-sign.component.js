var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { SignType } from './../../cj/cj-signature/cj-signature.interfaces';
import { coerceBooleanProperty } from './../../utility/lib-utility';
import { NbpSignService } from './nbp-sign.service';
var NbpSignComponent = (function () {
    function NbpSignComponent(signService) {
        this.signService = signService;
        this._secondActivation = false;
        /**
         * Evento emesso dopo l'invocazione della procedura di firma sullo
         * SPILayerMulticanale
         * @param {EventEmitter<any>} nbpOnSignStarted
         */
        this.nbpOnSignStarted = new EventEmitter();
        /**
         * Evento emesso al click del pulsante per il riavvio del Tablet
         * @param {EventEmitter<any>} nbpOnRiavviaTablet
         */
        this.nbpOnRiavviaTablet = new EventEmitter();
        /**
         * Evento emesso in caso di click del pulsante di ErrorAdvice
         * @param {EventEmitter<any>} nbpOnErrorAdvise
         */
        this.nbpOnErrorAdvise = new EventEmitter();
        /**
         * Evento emesso in caso di firma cartacea e click del pulsante 'Firma Completata'
         * @param {EventEmitter<any>} nbpOnPaperSignCompleted
         */
        this.nbpOnPaperSignConfirmed = new EventEmitter();
        this._signResult = true;
        this._errorAdvice = 'Attenzione, c\'è stato un errore durante la procedura.';
        this._actionLabel = 'Riprova';
    }
    Object.defineProperty(NbpSignComponent.prototype, "nbpSecondActivation", {
        /**
         * Comunica al componente che è la seconda attivazione del processo di firma
         * per l'XMLToSign.
         * NOTA: così non sarà chiamato il metodo PrintContract dello SPILayerMulticanale
         */
        get: function () { return this._secondActivation; },
        set: function (value) { this._secondActivation = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    NbpSignComponent.prototype.ngOnInit = function () {
        // Avvio del Tablet per la firma con invocazione metodi SPILayerMulticanale
        // metodo - PrintContract per firma FEA  
        // metodo - OpenBrowser per firma FDR
        // TODO: cosa dobbiamo fare per la firma CARTACEA ???
        if (!this.nbpSignType || !this.nbpXmlToSign
            || (this.nbpSignType.type !== SignType.FEA
                && this.nbpSignType.type !== SignType.FDR
                && this.nbpSignType.type !== SignType.CARTA)) {
            console.error('NbpSignComponent parametri obbligatori non presenti');
        }
        else {
            this._checkPaperPaperlessProcess(); // TODOREVIEW
        }
    };
    NbpSignComponent.prototype.ngAfterViewInit = function () {
        var _this = this;
        if (!this.nbpSignType || !this.nbpXmlToSign
            || (this.nbpSignType.type !== SignType.FEA
                && this.nbpSignType.type !== SignType.FDR
                && this.nbpSignType.type !== SignType.CARTA)) {
            console.error('NbpSignComponent parametri obbligatori non presenti');
        }
        else {
            setTimeout(function () {
                _this._startSignProcess();
            });
        }
    };
    /**
     * Invoca il corretto metodo di firma sull'ActiveX SPILayerMulticanale
     */
    NbpSignComponent.prototype._startSignProcess = function () {
        switch (this.nbpSignType.type) {
            case SignType.FEA:
                this._signResult = this.signService.signFEA(this.nbpXmlToSign, this._secondActivation);
                this._secondActivation = true;
                console.log('NbpSignComponent - emitting nbpOnSignStarted');
                this.nbpOnSignStarted.emit(this._signResult);
                break;
            case SignType.FDR:
                this._signResult = this.signService.signFDR(this.nbpXmlToSign);
                console.log('NbpSignComponent - emitting nbpOnSignStarted');
                this.nbpOnSignStarted.emit(this._signResult);
                break;
            case SignType.CARTA:
                this._signResult = this.signService.signCartacea(this.nbpXmlToSign);
                break;
        }
    };
    /**
     * Controlla se la firma è paperless o cartacea
     */
    NbpSignComponent.prototype._checkPaperPaperlessProcess = function () {
        this._isPaperless = this.nbpSignType.type !== SignType.CARTA;
    };
    NbpSignComponent.prototype._onRiavviaTablet = function () {
        console.log('NbpSignComponent - emitting nbpOnRiavviaTablet');
        this.nbpOnRiavviaTablet.emit();
        this._startSignProcess();
    };
    NbpSignComponent.prototype._onSignatureConfirm = function () {
        console.log('NbpSignComponent - emitting nbpOnPaperSignConfirmed');
        // this.nbpOnPaperSignCompleted.emit();
        this.nbpOnPaperSignConfirmed.emit();
    };
    NbpSignComponent.prototype._onErrorAdvise = function () {
        console.log('NbpSignComponent - emitting nbpOnErrorAdvise');
        this._startSignProcess();
        this.nbpOnErrorAdvise.emit();
    };
    return NbpSignComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSignComponent.prototype, "nbpSignType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSignComponent.prototype, "nbpCustomerInfo", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSignComponent.prototype, "nbpXmlToSign", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], NbpSignComponent.prototype, "nbpSecondActivation", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSignComponent.prototype, "nbpOnSignStarted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSignComponent.prototype, "nbpOnRiavviaTablet", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSignComponent.prototype, "nbpOnErrorAdvise", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSignComponent.prototype, "nbpOnPaperSignConfirmed", void 0);
NbpSignComponent = __decorate([
    Component({selector: 'nbp-sign',
        template: "<div><nbp-sign-info-header [nbpSignDescription]=\"nbpSignType?.description\" [nbpCustomerInfo]=\"nbpCustomerInfo\"></nbp-sign-info-header><div *ngIf=\"(_signResult && _isPaperless)\"><nbp-paperless-sign (onReEnableTablet)=\"_onRiavviaTablet()\"></nbp-paperless-sign></div><div *ngIf=\"(_signResult && !_isPaperless)\"><nbp-paper-sign (onSignatureConfirm)=\"_onSignatureConfirm()\"></nbp-paper-sign></div><nbp-sign-spilayer nbpObjectId=\"spilayerMulticanale\"></nbp-sign-spilayer></div><nbp-error-advice *ngIf=\"!_signResult\" [nbpAdvice]=\"_errorAdvice\" [nbpActionLabel]=\"_actionLabel\" (onError)=\"_onErrorAdvise()\"></nbp-error-advice>"
    }),
    __metadata("design:paramtypes", [NbpSignService])
], NbpSignComponent);
export { NbpSignComponent };
