var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable, ErrorHandler } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
import { GlobalErrorHandlerHelperService } from './global-error-handler-helper.service';
import { ApplicationStatusService } from './../application-status/application-status.service';
var GlobalErrorHandlerService = (function (_super) {
    __extends(GlobalErrorHandlerService, _super);
    // struttura dati dell'errore
    // {
    //   "timestamp": 1506680359665,
    //   "status": 500,
    //   "error": "Internal Server Error",
    //   "exception": "java.lang.RuntimeException",
    //   "message": "com.intesasanpaolo.isparc.errormanager.exception.application.TechnicalException: {Errore servizio getAFRYchclie soapenv:Server.SystemError {Y1001 RICHIESTA NON ESEGUITA-E10    NESSUN CODICE VALORIZZATO}.{Interfaces.WSI_DIAFRYV01C_01.DIAFRYV01C_Impl.CISCS_AFRYCHCLIE.AFRYCHCLIE.ParseEsito}.}.{Interfaces.WSI_NPUELCL00A_01.IMPL_NPUELCL00A.WS_NPUELCL00A.ParseResponse}.",
    //   "path": "/puv/api/clienti"
    // }
    // TODO iniettare nel costrutture un ErrorNotifierService che sarÃ  utilizzato
    // per la gestione della logica di errore (log sul server e show dialog sul fe)
    function GlobalErrorHandlerService(helper, appStatusService) {
        var _this = _super.call(this) || this;
        _this.helper = helper;
        _this.appStatusService = appStatusService;
        return _this;
    }
    GlobalErrorHandlerService.prototype.handleError = function (globalError) {
        _super.prototype.handleError.call(this, globalError);
        if (globalError.rejection && globalError.rejection instanceof HttpErrorResponse) {
            globalError = globalError.rejection;
        }
        if ((globalError instanceof HttpErrorResponse && globalError.status >= 300)) {
            if (globalError.error) {
                try {
                    var errorHandled = JSON.parse(globalError.error);
                    if (errorHandled.errorMessage) {
                        // Errore gestito a dal server
                        console.warn('Application HTTP failure from server');
                        console.warn('TODO Gestire l\'errore applicativo globalmente');
                        this.appStatusService.notifyError(this.helper.createClientErrorFromServerError(errorHandled));
                    }
                    else {
                        // Errore non gestito
                        console.warn("Generic HTTP failure from server");
                        console.warn('TODO Gestire l\'errore http globalmente');
                        this.appStatusService.notifyError(this.helper.createClientErrorFromHttpError(globalError));
                    }
                }
                catch (e) {
                    if (e instanceof SyntaxError) {
                        this.appStatusService.notifyError(this.helper.createClientErrorFromHttpError(globalError));
                    }
                }
            }
            else {
                // Errore non gestito
                console.warn("Generic HTTP failure from server");
                console.warn('TODO Gestire l\'errore http globalmente');
                this.appStatusService.notifyError(this.helper.createClientErrorFromHttpError(globalError));
            }
        }
        else {
            // Errore Angular
            console.warn("Application failure from Angular");
            console.warn('TODO Gestire l\'errore di codice globalmente');
            this.appStatusService.notifyError(this.helper.createClientError(globalError));
            // TODO fare la gestione dell'errore generico (eg. nullpointer)
        }
        console.groupEnd();
    };
    return GlobalErrorHandlerService;
}(ErrorHandler));
GlobalErrorHandlerService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [GlobalErrorHandlerHelperService,
        ApplicationStatusService])
], GlobalErrorHandlerService);
export { GlobalErrorHandlerService };
