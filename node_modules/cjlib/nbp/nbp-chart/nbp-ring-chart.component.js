var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { NbpChartService } from '../nbp-chart/nbp-chart.service';
var NbpRingChartComponent = (function () {
    function NbpRingChartComponent() {
        /** Testo dell' azione custom di selezione (es. Dettagli) */
        this.nbpSelectionLabel = '';
        /** default width */
        this.width = 300;
        /** default height */
        this.height = 400;
        /**
         * Evento emesso al click sul grafico
         * @param {EventEmitter<any>}  nbpOnSelection
         */
        this.nbpOnSelection = new EventEmitter();
        /** larghezza degli anelli */
        this.nbpBarWidth = 15;
        /** spaziatura tra gli anelli */
        this.nbpBarSpacing = 5;
        this._bars = [];
        this._titleSpans = [];
        this._titleLineHeight = 20;
        this._titleStart = 0;
        this._selectionActionStart = 0;
        this._padding = 15;
        this._footerHeight = 80;
    }
    NbpRingChartComponent.prototype.ngOnInit = function () {
        this.updateSize();
    };
    NbpRingChartComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        var titleWords = this.nbpData.title.split(' ');
        var lineLength = 10;
        var currentSpan = '';
        titleWords.forEach(function (word) {
            currentSpan += word;
            currentSpan += ' ';
            if (currentSpan.length > lineLength) {
                _this._titleSpans.push(currentSpan);
                currentSpan = '';
            }
        });
        if (currentSpan != '') {
            this._titleSpans.push(currentSpan);
        }
        this._titleStart = -this._titleLineHeight * this._titleSpans.length / 2 + this._titleLineHeight / 2;
        this._selectionActionStart = this._titleLineHeight * this._titleSpans.length / 2 + this._titleLineHeight / 2;
        this.updateSize();
        var initialAngle = Math.PI / 2;
        // TODO rewrite in more functional style
        this.nbpData.barGroups.forEach(function (barGroup, barGroupIndex) {
            var stackOnValue = 0;
            barGroup.bars.forEach(function (bar, barIndex) {
                if (barIndex > 0) {
                    stackOnValue += barGroup.bars[barIndex - 1].value;
                }
                if (stackOnValue > bar.max) {
                    stackOnValue = bar.max;
                }
                var value = bar.value;
                if (stackOnValue + value > bar.max) {
                    value = bar.max - stackOnValue;
                }
                if (value - bar.max < 0.001) {
                    value *= 0.9999;
                }
                var barView = {
                    id: bar.id,
                    label: bar.label,
                    color: bar.color,
                    value: value,
                    stackOnValue: stackOnValue,
                    path: '',
                    r: 0,
                    lane: barGroupIndex
                };
                _this._bars.push(barView);
            });
        });
        this._bars.forEach(function (bar, index) {
            bar.r = _this._externalRadius - (_this.nbpBarWidth * bar.lane) - (_this.nbpBarSpacing * bar.lane);
            var stackOnAngle = 2 * Math.PI * (bar.stackOnValue / 100);
            var angle = 2 * Math.PI * (bar.value / 100);
            var angleValue = initialAngle - angle;
            bar.endx = _this._chartCenter + bar.r * Math.cos(angleValue - stackOnAngle);
            bar.endy = _this._chartCenter - bar.r * Math.sin(angleValue - stackOnAngle);
            bar.startx = _this._chartCenter + bar.r * Math.cos(initialAngle - stackOnAngle);
            bar.starty = _this._chartCenter - bar.r * Math.sin(initialAngle - stackOnAngle);
            var largeArcFlag = angle <= Math.PI ? "0" : "1";
            var sweepArcFlag = 1;
            bar.path = "M" + bar.startx + "," + bar.starty + "  A" + bar.r + "," + bar.r + " 0 " + largeArcFlag + "," + sweepArcFlag + " " + bar.endx + "," + bar.endy;
        });
    };
    NbpRingChartComponent.prototype.updateSize = function () {
        this._chartWidth = this.width - 2 * this._padding;
        this._chartHeight = this.height - 2 * this._padding;
        this._chartEndy = this._padding + this._chartHeight - this._footerHeight; //TODO refactor naming
        var radius = Math.min(this._chartWidth / 2, this._chartEndy / 2);
        this._chartCenter = this._padding + radius;
        this._externalRadius = radius - this.nbpBarWidth / 2;
    };
    NbpRingChartComponent.prototype._onAction = function (value) {
        console.log('nbpChartComponent - Emiting: nbpOnSelection', value);
        this.nbpOnSelection.emit(value);
    };
    return NbpRingChartComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpRingChartComponent.prototype, "nbpSelectionLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpRingChartComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpRingChartComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpRingChartComponent.prototype, "nbpData", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpRingChartComponent.prototype, "testTrigger", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpRingChartComponent.prototype, "nbpOnSelection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpRingChartComponent.prototype, "nbpBarWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpRingChartComponent.prototype, "nbpBarSpacing", void 0);
NbpRingChartComponent = __decorate([
    Component({
        selector: 'nbp-ring-chart',template: "<div class=\"nbp-ring-chart\"><section class=\"chart-heading\"><h3 *ngFor=\"let header of nbpData.headers\" class=\"summary-text text-center\"><span *ngIf=\"header.content\" [innerHTML]=\"header.content\"></span><nbp-tooltip *ngIf=\"header.tooltipContent\" nbpPosition=\"Right\" nbpVisibilityStrategy=\"click\" [nbpText]=\"header.tooltipContent\"><span class=\"icon button-icon icon-question-circle-o\"></span></nbp-tooltip></h3></section><div class=\"svg-preserve-aspect-container\"><canvas class=\"svg-preserve-aspect-canvas\" height=\"400\" width=\"300\"></canvas><svg viewBox=\"0 0 300 400\" class=\"svg-preserve-aspect\"><defs><filter id=\"dropshadow\" x=\"-40%\" y=\"-40%\" width=\"180%\" height=\"180%\" filterUnits=\"userSpaceOnUse\"><feGaussianBlur in=\"SourceAlpha\" stdDeviation=\"3\"/><feOffset dx=\"5\" dy=\"5\" result=\"offsetblur\"/><feOffset dx=\"-5\" dy=\"-5\" result=\"offsetblur\"/><feMerge><feMergeNode/><feMergeNode in=\"SourceGraphic\"/><feMergeNode in=\"SourceGraphic\"/></feMerge></filter></defs><svg:path *ngFor=\"let bar of _bars\" [attr.d]=\"bar.path\" [style.stroke]=\"bar.color\" [style.stroke-width]=\"nbpBarWidth\" style=\"fill:none;\"/><svg:g [attr.transform]=\"'translate('+_chartCenter+' '+_chartCenter+')'\" (click)=\"_onAction('Default')\"><svg:text *ngFor=\"let titleSpan of _titleSpans; let index=index\" [attr.y]=\"_titleStart + (index * _titleLineHeight)\" class=\"center-title\" text-anchor=\"middle\" alignment-baseline=\"central\">{{titleSpan}}</svg:text><svg:text *ngIf=\"nbpSelectionLabel\" [attr.y]=\"_selectionActionStart\" class=\"center-subtitle\" text-anchor=\"middle\" alignment-baseline=\"central\">{{nbpSelectionLabel}} &gt;</svg:text></svg:g><svg:g [attr.transform]=\"'translate(0 '+_chartEndy+')'\"><svg:g *ngFor=\"let bar of _bars; let index=index\" [attr.transform]=\"'translate(8 '+(index * 20)+')'\"><svg:circle x=\"7\" y=\"10\" r=\"7\" [style.fill]=\"bar.color\"></svg:circle><svg:text x=\"20\" y=\"0\" alignment-baseline=\"central\" class=\"legend-label\">{{bar.label}}</svg:text></svg:g></svg:g></svg></div></div>",
        styles: [".button-icon{font-size:2em!important;color:#000;display:inline-block;vertical-align:middle}.nbp-ring-chart{width:100%;padding:10px}.svg-preserve-aspect-container{width:100%;height:100%;position:relative}.svg-preserve-aspect-canvas{display:block;width:100%;height:100%;visibility:hidden}.svg-preserve-aspect{width:100%;height:100%;left:0;position:absolute;top:0}.legend-label{font-family:sans-serif;font-size:1em}.summary-text{font-family:sans-serif;font-size:1em}.summary-value{font-weight:700}.center-title{font-size:1.2em;font-weight:700}.pointer-cursor{cursor:pointer}.center-subtitle{cursor:pointer;font-size:.8em;fill:#90ee90;font-weight:700}h3{margin-top:1px}.chart-heading{margin-top:5px;margin-bottom:15px} /*# sourceMappingURL=nbp-ring-chart.component.css.map */ "],
        providers: [NbpChartService]
    })
    /**
     * Componente ring-chart
    */
    ,
    __metadata("design:paramtypes", [])
], NbpRingChartComponent);
export { NbpRingChartComponent };
