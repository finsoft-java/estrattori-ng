var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject } from '@angular/core';
import { CjContextService } from './../../cj/cj-context/cj-context.service';
import { APP_CONFIG } from '../../module.config';
var GlobalErrorHandlerHelperService = (function () {
    function GlobalErrorHandlerHelperService(appConfig, contextService) {
        var _this = this;
        this.appConfig = appConfig;
        contextService.getCurrentCjContext().subscribe(function (context) {
            _this._contextInfo = context;
        });
    }
    /**
     * costruisce l'oggetto di errore client a partire dall'oggetto errore gestito
     * derivante dal server
     * @param  {IServerError} serverError errore http gestito dal BE
     * @return {IClientError}             errore integrato con info provenienti da FE
     */
    GlobalErrorHandlerHelperService.prototype.createClientErrorFromServerError = function (serverError) {
        var currentError;
        // popolare la struttura dati con i dati provenienti dall'errore http
        currentError = {
            errorCode: serverError.errorCode ? serverError.errorCode : '',
            errorSubCode: serverError.errorSubCode ? serverError.errorSubCode : null,
            errorMessage: serverError.errorMessage ? serverError.errorMessage : null,
            errorSource: serverError.errorSource ? serverError.errorSource : null,
            stackTrace: serverError.stackTrace ? serverError.stackTrace : null,
            userAgent: ''
        };
        this.addDebugAndAppInfo(currentError);
        return currentError;
    };
    /**
    * costruisce l'oggetto di errore client a partire dall'oggetto errore
    * standard HTTP
    * @param  {IServerError} serverError errore http gestito dal BE
    * @return {IClientError}             errore integrato con info provenienti da FE
    */
    GlobalErrorHandlerHelperService.prototype.createClientErrorFromHttpError = function (httpError) {
        var currentError;
        // popolare la struttura dati con i dati provenienti dall'errore http
        currentError = {
            errorCode: '',
            errorMessage: httpError.message,
            errorSource: httpError.url,
            userAgent: ''
        };
        this.addDebugAndAppInfo(currentError);
        return currentError;
    };
    /**
     * Costruisce l'oggetto di errore client a partire dall'oggetto di errore
     * standard di angular
     * @param  {any}          globalError errore sollevato da angular
     * @return {IClientError}             errore integrato con info provenienti da FE
     */
    GlobalErrorHandlerHelperService.prototype.createClientError = function (globalError) {
        var currentError;
        // popolare la struttura dati per l'errore
        currentError = {
            errorCode: '',
            errorMessage: globalError.message ? globalError.message : null,
            errorSource: 'angular',
            stackTrace: globalError.stack ? globalError.stack : null,
            userAgent: ''
        };
        this.addDebugAndAppInfo(currentError);
        return currentError;
    };
    /**
     * recupera le informazioni relative alla risoluzione dello schermo
     * @return {IResolutionData} screen resolution
     */
    GlobalErrorHandlerHelperService.prototype.getScreenResolution = function () {
        var resolution = {
            width: window.screen.width,
            height: window.screen.height
        };
        return resolution;
    };
    /**
     * recupera le informazioni relative alla risoluzione del monitor
     * @return {IResolutionData} window resolution
     */
    GlobalErrorHandlerHelperService.prototype.getWindowResolution = function () {
        var resolution = {
            width: window.innerWidth,
            height: window.innerHeight
        };
        return resolution;
    };
    /**
     * Aggiunge all'oggetto error le informazioni relative a debug info e
     * application info
     * @param {IClientError} currentError struttura dati da inviare al serivzio di logging
     */
    GlobalErrorHandlerHelperService.prototype.addDebugAndAppInfo = function (currentError) {
        if (currentError) {
            this.addDebugInfo(currentError);
            this.addApplicationInfo(currentError);
            this.addContextInfo(currentError);
        }
    };
    GlobalErrorHandlerHelperService.prototype.addContextInfo = function (error) {
        error.cjContext = this._contextInfo;
    };
    /**
     * recupera le informazioni di debug dal Browser
     * @param {IClientError} error struttura dati da inviare al serivzio di logging
     */
    GlobalErrorHandlerHelperService.prototype.addDebugInfo = function (error) {
        if (error) {
            error.userAgent = window.navigator.userAgent;
            error.screenResolution = this.getScreenResolution();
            error.windowResolution = this.getWindowResolution();
        }
    };
    /**
     * recupera le informazioni relative all'applicazione
     * @param {IClientError} error struttura dati da inviare al servizio di logging
     */
    GlobalErrorHandlerHelperService.prototype.addApplicationInfo = function (error) {
        if (this.appConfig && this.appConfig.getApplicationInfo) {
            this.appConfig.getApplicationInfo().subscribe(function (appInfo) {
                error.application = appInfo.application;
                error.version = appInfo.version;
                error.environment = appInfo.environment;
            });
        }
    };
    return GlobalErrorHandlerHelperService;
}());
GlobalErrorHandlerHelperService = __decorate([
    Injectable(),
    __param(0, Inject(APP_CONFIG)),
    __metadata("design:paramtypes", [Object, CjContextService])
], GlobalErrorHandlerHelperService);
export { GlobalErrorHandlerHelperService };
