var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef } from '@angular/core';
var i = 0;
var NbpEllipsisDirective = (function () {
    function NbpEllipsisDirective(elRef) {
        this.elRef = elRef;
    }
    NbpEllipsisDirective.prototype.ngAfterViewChecked = function () {
        this.ellipsizeTextBox();
    };
    NbpEllipsisDirective.prototype.hasOverflow = function () {
        var el = this.elRef.nativeElement;
        return el.scrollHeight > el.offsetHeight;
    };
    NbpEllipsisDirective.prototype.ellipsizeTextBox = function () {
        // rifattorizzare funzione xke troppo pesante  
        // idea contare il numero di righe e passare un quantitativo di caratteri leggermente maggiore del max possibile nel box
        var el = this.elRef.nativeElement;
        this.paragraph = el.innerHTML;
        this.wordArray = this.paragraph.split(' ');
        while (this.hasOverflow()) {
            this.wordArray.pop();
            el.innerHTML = this.wordArray.join(' ') + '...';
        }
    };
    return NbpEllipsisDirective;
}());
NbpEllipsisDirective = __decorate([
    Directive({
        selector: '[nbpEllipsis]'
    }),
    __metadata("design:paramtypes", [ElementRef])
], NbpEllipsisDirective);
export { NbpEllipsisDirective };
