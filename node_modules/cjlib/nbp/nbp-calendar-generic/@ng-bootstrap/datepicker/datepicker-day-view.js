var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, Component, Input } from '@angular/core';
var NgbDatepickerDayView = (function () {
    function NgbDatepickerDayView() {
    }
    NgbDatepickerDayView.prototype.isMuted = function () { return !this.selected && (this.date.month !== this.currentMonth || this.disabled); };
    NgbDatepickerDayView.prototype.abilitaGiorni = function (data) {
        var buffer = new Date(data.year, data.month - 1, data.day);
        var startDate = new Date(this.startDateEnabled.year, this.startDateEnabled.month - 1, this.startDateEnabled.day);
        var endDate = new Date(this.endDateEnabled.year, this.endDateEnabled.month - 1, this.endDateEnabled.day);
        if (startDate <= buffer && buffer <= endDate) {
            return true;
        }
        return false;
    };
    return NgbDatepickerDayView;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], NgbDatepickerDayView.prototype, "currentMonth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgbDatepickerDayView.prototype, "date", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgbDatepickerDayView.prototype, "disabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgbDatepickerDayView.prototype, "focused", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NgbDatepickerDayView.prototype, "selected", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgbDatepickerDayView.prototype, "startDateEnabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NgbDatepickerDayView.prototype, "endDateEnabled", void 0);
NgbDatepickerDayView = __decorate([
    Component({
        selector: '[ngbDatepickerDayView]',
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            'class': 'btn-secondary',
            '[class.bg-primary]': 'selected',
            '[class.text-white]': 'selected',
            '[class.text-muted]': 'isMuted()',
            '[class.outside]': 'isMuted()',
            '[class.active]': 'focused'
        },
        template: "<div [ngClass]=\" abilitaGiorni(date) ? 'ngbdatepickerdayview' : 'ngbdatepickerdayviewdisabled'\">{{ date.day }}</div>",
        styles: [":host{text-align:center;width:2rem;height:2rem;line-height:2rem;border-radius:.25rem}:host.outside{opacity:.5}.ngbdatepickerdayview{border-radius:0!important;box-sizing:border-box;text-align:center;width:inherit!important;height:inherit!important;line-height:45px!important;vertical-align:middle}.ngbdatepickerdayviewdisabled{box-sizing:border-box;text-align:center;width:inherit!important;height:inherit!important;line-height:45px!important;vertical-align:middle;background-color:gray;color:#fff} /*# sourceMappingURL=datepicker-day-view.css.map */ "],
    })
], NgbDatepickerDayView);
export { NgbDatepickerDayView };
