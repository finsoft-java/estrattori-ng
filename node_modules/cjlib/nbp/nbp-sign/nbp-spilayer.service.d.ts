import { NbpSpilayerUtilityService, ISpilayerUtility } from './../nbp-sign-spilayer/nbp-spilayer-utility.service';
import { SpilayerMockUtilityService } from './../nbp-sign-spilayer/spilayer-mock-utility.service';
import { ApplicationConfig } from '../../module.config';
export interface ISpilayer {
    /**
     * Metodo per verificare se lo spooler di firma è attivo.
     * @return {boolean} spooler di firma è attivo?
     */
    isISPADContrattiEnabled(): boolean;
    /**
     * Metodo per scatenare una stampa dematerializzata o
     * cartacea di un contratto che prevede la dematerializzazione.
     * @param  {string}  xml XML di stampa secondo formalismo
     */
    printContract(xml: string): void;
    /**
     * Permette la visualizzazione dell’applicativo web della FDR nel PAD 10’.
     * @param  {string}  xml xml che indicherà l’url da richiamare e i parametri da inviare al sito dell’FDR
     */
    openBrowser(xml: string): void;
    /**
     * Chiusura programmatica Browser Tablet 10’.
     * @param {string}             caption titolo del popup
     * @param {string}             message messaggio del popup
     * @param {info|warning|error} type    tipo di popup che può essere
     */
    closeBrowser(caption?: string, message?: string, type?: 'info' | 'warning' | 'error'): void;
    /** aggiornamento dell' id assegnato al tag object dell' ActiveX
     * @param {string}             objectId id utilizzato nell' html per istanziare l'ActiveX tramite tag <object>
    */
    updateActiveXReference(objectId: string): void;
    /**
     * Permette di aprire (visualizzare se ridotto ad icona) lo Spooler.
     */
    showISPADContratti(): void;
}
export declare class NbpSpilayerService implements ISpilayer {
    private appConfig;
    private spilayerUtility;
    private mockSpilayerUtility;
    activeXUtility: ISpilayerUtility;
    private _environment;
    /** refresh dell' ActiveX dopo che il tag è stato istanziato nella pagina */
    updateActiveXReference(objectId: string): void;
    selectSpilayerIfActiveXAvailable(): void;
    constructor(appConfig: ApplicationConfig, spilayerUtility: NbpSpilayerUtilityService, mockSpilayerUtility: SpilayerMockUtilityService);
    isISPADContrattiEnabled(): boolean;
    printContract(xml: string): boolean;
    openBrowser(xml: string): boolean;
    closeBrowser(caption?: string, message?: string, type?: 'info' | 'warning' | 'error'): boolean;
    showISPADContratti(): void;
}
