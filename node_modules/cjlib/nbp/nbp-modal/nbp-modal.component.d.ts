import { OnInit, OnChanges, EventEmitter, SimpleChanges, ElementRef, DoCheck, KeyValueDiffers } from '@angular/core';
import { INbpButton, INbpButtonLib } from './../nbp-commons/nbp-commons.interface';
import { INbpModal } from './nbp-modal.interfaces';
import { NbpSize } from './../nbp-commons/nbp-commons.enums';
import { CjErrorModalComponent } from './../../cj/cj-error-modal/cj-error-modal.component';
import { NbpAutoFocusInModalDirective } from './nbp-auto-focus-in-modal.directive';
/**
 * La Finestra Modale è una pagina che viene visualizzata al di sopra della pagina
 * corrente, la quale viene disabilitata.
 */
export declare class NbpModalComponent implements OnInit, OnChanges, DoCheck, INbpModal {
    private cjErrorModal;
    private _differs;
    id: string;
    _nbpOpened: boolean;
    /**
     * Flag che controlla la visibilità della modale.
     */
    nbpOpened: boolean;
    nbpOpenedChange: EventEmitter<{}>;
    /**
     * (Opzionale) Stringa da utilizzare come titolo della finestra modale
     */
    nbpTitle: string;
    /**
     * (Opzionale) Stringa da utilizzare come sotto-titolo della finestra modale
     */
    nbpSubTitle: string;
    /**
     * Proprietà che definisce la grandezza della modale, tramite l'enum NbpSize
     * valore di default: NbpSize.MD
     */
    nbpSize: NbpSize;
    /**
     * Array che descrive i pulsanti
     * da visualizzare nella modale
     */
    nbpButtons: Array<INbpButton>;
    /**
     * Object che definisce uno stile aggiuntivo per il container di default è definito = {'max-height': '90vh'}
     */
    nbpContainerStyle: object;
    /**
     * Evento lanciato alla pressione di ogni pulsante.
     * Viene passato come parametro il pulsante cliccato.
     */
    nbpOnButtonClicked: EventEmitter<INbpButton>;
    /**
     * Evento lanciato alla chusura della modale.
     */
    nbpOnClose: EventEmitter<any>;
    /**
     * Evento lanciato all'apertura della modale.
     */
    nbpOnOpen: EventEmitter<any>;
    _modalSize: any;
    _shadowButtons: Array<INbpButtonLib>;
    _isModalInsideErrorModal: boolean;
    _maxHeight: {
        'max-height': string;
    };
    private initialized;
    constructor(cjErrorModal: CjErrorModalComponent<any>, _differs: KeyValueDiffers);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _populateShadowButtons();
    private _populateStyles();
    private _evaluateButtonsAndLayout();
    _getDisplayStyleValue(): boolean;
    _onClick(button: INbpButton): void;
    open(): void;
    close(): void;
    /** SET DEL FOCUS AUTOMATICO
     * questi due ContentChild accedono allo stesso componente (su cui è settata la direttiva NbpAutoFocusInModalDirective)
     * Una accede ai metodi della direttiva, l'altro all'oggetto del DOM.
     */
    autoFocusComponent: NbpAutoFocusInModalDirective;
    autoFocusCompDOMRef: ElementRef;
    /**
     * si occupa di settare il focus sull'elemento (attivando la grafica come se fosse avvenuta la pressione del tab).
     *
     * il set del focus avviene in due fasi:
     * - si setta il focus vero e proprio all'interno del componente.
     * - si setta la grafica del componente come se si fosse settato il focus tramite tasto tab
     */
    private setFocusOnElement();
    /**
     * si occupa di resettare il focus sull'elemento (necessario per far funzionare
     * il successivo set del focus all'apertura della modale).
     */
    private resetFocusOnElement();
    /**
     * setta il focus vero e proprio all'interno del componente.
     * Si accede all'elemento del DOM su cui è posizionata la direttiva NbpAutoFocusInModalDirective,
     * da esso si ricerca ricorsivamente nell'albero html in esso contenuto l'elemento html standard su cui settare
     * il focus.
     */
    private setInnerFocusOnElement();
    /**
     * questa funzione cerca nell'albero html interno al componente passato per trovare il primo elemento senza figli con
     * la proprietà tabIndex settata, nell'ipotesi che questo sia l'elemento su cui fare il focus.
     * @param {HTMLElement} idElement
     * @returns {any}
     */
    private searchInsideComponent(idElement);
    /**
     * questo metodo si occupa di chiamare il metodo della direttiva NbpAutoFocusInModalDirective
     * che sarà applicata sul componente su cui settare il focus. (la direttiva funge da interfaccia unica per
     * tutti i vari componenti che supportano il focus da tab)
     */
    private simulateTabFocusOnElement();
    /**
     * questo metodo si occupa di chiamare il metodo della direttiva NbpAutoFocusInModalDirective
     * che sarà applicata sul componente su cui resettare il focus. (la direttiva funge da interfaccia unica per
     * tutti i vari componenti che supportano il focus da tab)
     */
    private resetTabFocusOnElement();
    private buttonsDiffers;
    private buttonsNeedUpdate;
    ngDoCheck(): void;
    /**
     * genera un differ per confrontare i cambiamenti all'interno dell'array nbpButtons
     * @private
     */
    private _createButtonsDiffers();
}
