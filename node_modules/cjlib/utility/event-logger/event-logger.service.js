var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { ApplicationStatusService } from './../application-status/application-status.service';
import { ServerEventLoggerService } from './server-event-logger.service';
/**
 * Servizio istanziato in fase di inizializzazione tramite APP_INITIALIZER
 */
var EventLoggerService = (function () {
    function EventLoggerService(applicationStatus, serverLogger) {
        var _this = this;
        this.serverLogger = serverLogger;
        applicationStatus.getErrorRawStream().filter(function (error) { return error !== null; }).subscribe(function (error) {
            _this.sendError(error);
        });
    }
    EventLoggerService.prototype.sendEvent = function (event) {
        // TODO ancora da implementare
        this.serverLogger.logEvent(event);
    };
    EventLoggerService.prototype.sendError = function (error) {
        this.serverLogger.logError(error);
    };
    return EventLoggerService;
}());
EventLoggerService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [ApplicationStatusService,
        ServerEventLoggerService])
], EventLoggerService);
export { EventLoggerService };
export function ApplicationEventLoggerFactory(startupService) {
    return function () { return true; };
}
