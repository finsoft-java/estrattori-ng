var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { SignType } from './cj-signature.interfaces';
import { coerceBooleanProperty } from './../../utility/lib-utility';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/startWith';
import 'rxjs/add/operator/mergeMapTo';
import 'rxjs/add/observable/timer';
var CjSignatureComponent = (function () {
    function CjSignatureComponent() {
        this._secondActivation = false;
        /**
         * Evento emesso al click del pulsante per il riavvio del Tablet
         * @param {EventEmitter<any>} cjOnRiavviaTablet
         */
        this.cjOnRiavviaTablet = new EventEmitter();
        /**
         * Evento emesso in caso di click del pulsante di ErrorAdvice
         * @param {EventEmitter<any>} cjOnErrorAdvise
         */
        this.cjOnErrorAdvise = new EventEmitter();
        /**
         * Evento emesso in caso di firma cartacea e click del pulsante 'Firma Completata'
         * @param {EventEmitter<any>} cjOnPaperSignCompleted
         */
        this.cjOnPaperSignConfirmed = new EventEmitter();
        /**
         * Evento emesso quando la funzione checkSignatureStatus del
         * datasource ritorna TRUE
         * @param {EventEmitter<any>} cjOnSignProcedureEnded
         */
        this.cjOnSignProcedureEnded = new EventEmitter();
    }
    Object.defineProperty(CjSignatureComponent.prototype, "cjSecondActivation", {
        /**
         * Comunica al componente che è la seconda attivazione del processo di firma
         * per l'XMLToSign.
         * NOTA: così non sarà chiamato il metodo PrintContract dello SPILayerMulticanale
         */
        get: function () { return this._secondActivation; },
        set: function (value) { this._secondActivation = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    CjSignatureComponent.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.cjSignatureDatasource) {
            console.error('CjSignatureComponent - Datasource non presente');
            return;
        }
        switch (this.cjSignType.type) {
            // case SignType.FIRMA_ELETTRONICA_AVANZATA:
            // case SignType.FIRMA_CARTACEA:
            case SignType.FEA:
            case SignType.CARTA:
                this.xmlSubscription = this.cjSignatureDatasource.getFeaXmlToSign().subscribe(function (xml) {
                    _this._xmlToSign = xml;
                });
                break;
            // case SignType.FIRMA_DIGITALE_REMOTA:
            case SignType.FDR:
                this.xmlSubscription = this.cjSignatureDatasource.getFdrXmlToSign().subscribe(function (xml) {
                    _this._xmlToSign = xml;
                });
                break;
        }
    };
    CjSignatureComponent.prototype.ngOnDestroy = function () {
        this.unsubscribeObservable('all');
    };
    CjSignatureComponent.prototype.unsubscribeObservable = function (name) {
        switch (name) {
            case "polling":
                if (this.pollingSubscription) {
                    this.pollingSubscription.unsubscribe();
                }
                break;
            case "xml":
                if (this.xmlSubscription) {
                    this.xmlSubscription.unsubscribe();
                }
                break;
            case "all":
                this.unsubscribeObservable('polling');
                this.unsubscribeObservable('xml');
                break;
        }
    };
    CjSignatureComponent.prototype.pollingFunction = function () {
        // console.log('CjSignatureComponent - start polling procedure');
        var _this = this;
        this.pollingSubscription = Observable.timer(0, 1000)
            .concatMap(function () { return _this.cjSignatureDatasource.checkSignatureStatus(); })
            .subscribe(function (status) {
            if (status) {
                _this.cjOnSignProcedureEnded.emit();
                // console.log('CjSignatureComponent - stop polling procedure');
                _this.unsubscribeObservable('polling');
            }
        });
    };
    CjSignatureComponent.prototype._onPaperSignConfirmed = function () {
        // console.log('CjSignatureComponent - emitting cjOnPaperSignConfirmed');
        this.cjOnPaperSignConfirmed.emit();
    };
    CjSignatureComponent.prototype._onSignStarted = function (result) {
        if (result && this.cjSignType.type !== SignType.CARTA) {
            this.pollingFunction();
        }
    };
    CjSignatureComponent.prototype._onRiavviaTablet = function () {
        this.cjOnRiavviaTablet.emit();
    };
    CjSignatureComponent.prototype._onErrorAdvise = function () {
        this.cjOnErrorAdvise.emit();
    };
    return CjSignatureComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjSignatureComponent.prototype, "cjSignatureDatasource", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjSignatureComponent.prototype, "cjSignType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjSignatureComponent.prototype, "cjCustomerInfo", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], CjSignatureComponent.prototype, "cjSecondActivation", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CjSignatureComponent.prototype, "cjOnRiavviaTablet", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CjSignatureComponent.prototype, "cjOnErrorAdvise", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CjSignatureComponent.prototype, "cjOnPaperSignConfirmed", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CjSignatureComponent.prototype, "cjOnSignProcedureEnded", void 0);
CjSignatureComponent = __decorate([
    Component({
        selector: 'cj-signature',template: "<nbp-sign *ngIf=\"!!_xmlToSign\" [nbpSignType]=\"cjSignType\" [nbpCustomerInfo]=\"cjCustomerInfo\" [nbpXmlToSign]=\"_xmlToSign\" [nbpSecondActivation]=\"cjSecondActivation\" (nbpOnSignStarted)=\"_onSignStarted($event)\" (nbpOnRiavviaTablet)=\"_onRiavviaTablet()\" (nbpOnErrorAdvise)=\"_onErrorAdvise()\" (nbpOnPaperSignConfirmed)=\"_onPaperSignConfirmed()\"></nbp-sign>",
    }),
    __metadata("design:paramtypes", [])
], CjSignatureComponent);
export { CjSignatureComponent };
