var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject } from '@angular/core';
import { NbpSpilayerUtilityService } from './../nbp-sign-spilayer/nbp-spilayer-utility.service';
import { SpilayerMockUtilityService } from './../nbp-sign-spilayer/spilayer-mock-utility.service';
import { APP_CONFIG } from '../../module.config';
var NbpSpilayerService = (function () {
    function NbpSpilayerService(appConfig, spilayerUtility, mockSpilayerUtility) {
        var _this = this;
        this.appConfig = appConfig;
        this.spilayerUtility = spilayerUtility;
        this.mockSpilayerUtility = mockSpilayerUtility;
        // TODOREVIEW caricamento dell' ambiente in APP_INITIALIZER
        if (this.appConfig && this.appConfig.getApplicationInfo) {
            this.appConfig.getApplicationInfo().subscribe(function (appInfo) {
                _this._environment = appInfo.environment;
            });
        }
        if (spilayerUtility.isActiveXInstantiated()) {
            this.activeXUtility = spilayerUtility;
            console.log('SPILayerMulticanale ActiveX istanziato nel costruttore');
        }
    }
    /** refresh dell' ActiveX dopo che il tag Ã¨ stato istanziato nella pagina */
    NbpSpilayerService.prototype.updateActiveXReference = function (objectId) {
        console.log('updateActiveXReference ' + objectId);
        if (this.spilayerUtility) {
            this.spilayerUtility.activeXId = objectId;
            this.spilayerUtility.linkActiveXReference();
        }
        if (this.mockSpilayerUtility) {
            this.mockSpilayerUtility.activeXId = objectId;
            // TODO REVIEW this.mockSpilayerUtility.linkActiveXReference();
        }
        this.selectSpilayerIfActiveXAvailable();
    };
    NbpSpilayerService.prototype.selectSpilayerIfActiveXAvailable = function () {
        console.log('SPILayerMulticanale selectActiveXOrMock()');
        if (this.spilayerUtility.isActiveXInstantiated()) {
            this.activeXUtility = this.spilayerUtility;
            console.log('SPILayerMulticanale ActiveX istanziato');
        }
        else {
            if (this._environment && this._environment === 'PRODUZIONE') {
                console.warn('SPILayerMulticanale non istanziato!');
                //TODO verificare se visualizzare modale errore
            }
            else {
                this.activeXUtility = this.mockSpilayerUtility;
                console.log('SPILayerMulticanale Mock istanziato in selectSpilayerIfActiveXAvailable');
            }
        }
    };
    // WARNING se ISPAD non attivo
    NbpSpilayerService.prototype.isISPADContrattiEnabled = function () {
        if (!this.activeXUtility) {
            console.warn('SPILayerMulticanale not istantiated!');
            return false;
        }
        var operationResult = this.activeXUtility.isISPADContrattiEnabled();
        console.log('ISPAD Contratti attivo: ' + operationResult);
        return operationResult;
    };
    NbpSpilayerService.prototype.printContract = function (xml) {
        if (!this.activeXUtility) {
            console.warn('SPILayerMulticanale not istantiated!');
            return false;
        }
        var operationResult = this.activeXUtility.isISPADContrattiEnabled();
        if (operationResult) {
            operationResult = this.activeXUtility.printContract(xml);
            console.log('SPILayerMulticanale ha lanciato correttamente la stampa: ' + operationResult);
        }
        return operationResult;
    };
    NbpSpilayerService.prototype.openBrowser = function (xml) {
        if (!this.activeXUtility) {
            console.warn('SPILayerMulticanale not istantiated!');
            return false;
        }
        var operationResult = this.activeXUtility.isISPADContrattiEnabled();
        if (operationResult) {
            operationResult = this.activeXUtility.openBrowser(xml);
            console.log("SPILayerMulticanale ha lanciato correttamente l'apertura del browser: " + operationResult);
        }
        return operationResult;
    };
    NbpSpilayerService.prototype.closeBrowser = function (caption, message, type) {
        if (!this.activeXUtility) {
            console.warn('SPILayerMulticanale not istantiated!');
            return false;
        }
        var operationResult = this.activeXUtility.isISPADContrattiEnabled();
        if (operationResult) {
            this.activeXUtility.closeBrowser();
            console.log("SPILayerMulticanale chiamata CloseBrowser: " + operationResult);
        }
    };
    NbpSpilayerService.prototype.showISPADContratti = function () {
        this.activeXUtility.showISPADContratti();
        console.log('SPILayerMulticanale chiamata ShowISPADContratti');
    };
    return NbpSpilayerService;
}());
NbpSpilayerService = __decorate([
    Injectable(),
    __param(0, Inject(APP_CONFIG)),
    __metadata("design:paramtypes", [Object, NbpSpilayerUtilityService,
        SpilayerMockUtilityService])
], NbpSpilayerService);
export { NbpSpilayerService };
