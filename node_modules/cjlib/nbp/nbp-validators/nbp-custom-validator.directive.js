var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import { NbpCustomValidationService } from './nbp-custom-validation.service';
var CustomValidator = CustomValidator_1 = (function () {
    function CustomValidator(validationService) {
        this.validationService = validationService;
    }
    CustomValidator.prototype.validate = function (control) {
        var _this = this;
        var validationPlaceholders = {};
        if (!this.validationKeys || this.validationKeys.length === 0) {
            return null;
        }
        this.validationKeys.forEach(function (key) {
            var validationPlaceholder = _this.validationService.getValidationPlaceholder(key);
            if (validationPlaceholder) {
                validationPlaceholders[key] = validationPlaceholder;
            }
        });
        if (!validationPlaceholders) {
            return null;
        }
        return validationPlaceholders;
    };
    return CustomValidator;
}());
__decorate([
    Input(),
    __metadata("design:type", Array)
], CustomValidator.prototype, "validationKeys", void 0);
CustomValidator = CustomValidator_1 = __decorate([
    Directive({
        selector: 'nbp-input-text[validationKeys][ngModel]',
        providers: [
            { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return CustomValidator_1; }), multi: true }
        ]
    }),
    __metadata("design:paramtypes", [NbpCustomValidationService])
], CustomValidator);
export { CustomValidator };
var CustomValidator_1;
