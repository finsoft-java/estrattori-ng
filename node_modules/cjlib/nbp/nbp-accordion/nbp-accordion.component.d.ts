import { EventEmitter, OnInit } from '@angular/core';
import { NbpAccordionEvent, INbpAccordion } from './nbp-accordion.interfaces';
import { NbpStyle } from './../nbp-commons/nbp-commons.enums';
export declare class NbpAccordionComponent implements INbpAccordion, OnInit {
    id: string;
    /**
     * Label visualizzata a sinistra come titolo dell’accordion
     */
    nbpTitle: string;
    /**
     * Label visualizzata a sinistra come sottotitolo dell'accordion
     */
    nbpSubtitle: string;
    /**
     * Label accessoria visualizzata a destra dell'accordion
     */
    nbpLabel: string;
    /**
     * (Opzionale) Booleano che pilota la visualizzazione iniziale dell’accordion collassato o espanso.
     *Default accordion collassato.
     */
    nbpCollapsed: boolean;
    nbpStyle: NbpStyle;
    /**
     * (Opzionale) Nome della classe icona da visualizzare
     */
    nbpIcon: string;
    /**
   * Booleano che indica se mostrare icona e tooltip nell'intestazione del componente
   */
    showTooltip: boolean;
    /**
     * (Opzionale) Enum che definisce il la posizione del tooltip rispetto all’oggetto al quale è ancorato:
     * “Top” | “Right” | “Bottom” | “Left” | “Top-Left” | “Top-Right” | “Bottom-Left” | “Bottom-Right”
     * Default: “Top”
     */
    tooltipPosition: string;
    /**
     * Strategia di apertura tooltip, 'click' o 'hover':
     * click -> comportamento popover con apertura e chiusura su click (più pulsante x all'interno del tooltip)
     * hover -> comportamento tooltip classico apertura su hover , chiusura sulla perdita dell'hover
     * Valore di default: hover
    */
    tooltipVisibility: string;
    /**
     * Stringa che definisce il testo del tooltip
     */
    tooltipText: string;
    /**
     * Proprietà che definisce la grandezza del tooltip, tramite l'enum NbpSize
     * valore di default: NbpSize.SM
     */
    tooltipSize: any;
    /**
     * Stringa che definisce la classe dell'icona da mostrare
     */
    tooltipIcon: string;
    /**
     * Evento emesso sul toggle del componente.
     * @param {EventEmitter<NbpAccordionEvent>}  nbpOnToggle
     */
    nbpOnToggle: EventEmitter<NbpAccordionEvent>;
    _style: any;
    /**
     * metodo utilizzabile per l’apertura programmatica
     */
    open(): void;
    /**
     * metodo utilizzabile per la chiusura programmatica
     */
    close(): void;
    /**
     * metodo utilizzabile per verificare se il componente è collassato
     */
    isCollapsed(): boolean;
    constructor();
    ngOnInit(): void;
    _toggleCollapse(): void;
    private _onToggle();
}
