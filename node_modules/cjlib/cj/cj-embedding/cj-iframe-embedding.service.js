var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { CjEmbeddingUtility } from './cj-embedding.utility';
import { NbpEmbeddingMessageType } from './../../nbp/nbp-commons/nbp-commons.enums';
import { ReplaySubject } from 'rxjs/ReplaySubject';
import { Subject } from 'rxjs/Subject';
import { NbpEmbeddingService } from './../../nbp/nbp-embedding/nbp-embedding.service';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
var CjIFrameEmbeddingService = (function () {
    function CjIFrameEmbeddingService(embeddingUtility, embeddingService) {
        this.embeddingUtility = embeddingUtility;
        this.embeddingService = embeddingService;
        this.knownNdceEvents = [
            'MODAL_WINDOW',
            'PAGE_SCROLL',
            'FLOATING_MENU',
            'SET_FONT_SIZE',
            'SET_CONTRAST',
            'ERROR'
        ];
        this._outgoingMessages$ = new ReplaySubject();
        this._incomingMessages$ = new Subject();
    }
    Object.defineProperty(CjIFrameEmbeddingService.prototype, "isEmbeddingEnabled", {
        get: function () {
            return this._isEmbeddingEnabled;
        },
        set: function (value) {
            var _this = this;
            this._isEmbeddingEnabled = value;
            if (value) {
                window.addEventListener('message', function (msg) { return _this.receiveMessage(msg); });
                this.registerOnIncomingMessages();
                this.registerOnOutgoingMessages();
                this.registerOnOutgoingEvents();
            }
        },
        enumerable: true,
        configurable: true
    });
    CjIFrameEmbeddingService.prototype.registerOnIncomingMessages = function () {
        var _this = this;
        this._incomingMessages$.subscribe(function (message) {
            var event = _this.transformMessageToEvent(message);
            _this.embeddingService.notifyIncomingEvent(event);
        });
    };
    CjIFrameEmbeddingService.prototype.registerOnOutgoingMessages = function () {
        var _this = this;
        this._outgoingMessages$.subscribe(function (message) {
            _this.sendMessage(message);
        });
    };
    CjIFrameEmbeddingService.prototype.registerOnOutgoingEvents = function () {
        var _this = this;
        this.embeddingService.getOutgoingEventStream().subscribe(function (event) {
            var message = _this.transformEventToMessage(event);
            _this.notifyOutgoingMessage(message);
        });
    };
    CjIFrameEmbeddingService.prototype.receiveMessage = function (event) {
        var data = event.data;
        if (this.isEmbeddingMessage(data)) {
            this.notifyIncomingMessage(data);
        }
    };
    CjIFrameEmbeddingService.prototype.getOutgoingMessageStream = function () {
        return this._outgoingMessages$.asObservable();
    };
    /**
     * Permette di aggiungere un embbendingMessage
     * @param message: IEmbeddingMessage
     */
    CjIFrameEmbeddingService.prototype.notifyOutgoingMessage = function (message) {
        this._outgoingMessages$.next(message);
    };
    /**
     * Permette di ricevere embeddingMessage dall'esterno
     */
    CjIFrameEmbeddingService.prototype.notifyIncomingMessage = function (message) {
        this._incomingMessages$.next(message);
    };
    /**
     * invia un qualunque messaggio IEmbeddingMessage
     */
    CjIFrameEmbeddingService.prototype.sendMessage = function (message) {
        // TODO capire meglio cosa indicare nel secondo parametro,
        // "*" Ã¨ troppo generico
        window.parent.postMessage(message, '*');
    };
    /**
     * crea e invia il messagio di CJ_READY verso l'esterno
     */
    CjIFrameEmbeddingService.prototype.sendReadyMessage = function () {
        var message = this.embeddingUtility.createReadyMessage();
        window.parent.postMessage(message, '*');
    };
    /**
     * crea e invia il messagio di MODAL_WINDOW verso l'esterno
     */
    CjIFrameEmbeddingService.prototype.sendModalWindowMessage = function (cmd) {
        var message = this.embeddingUtility.createModalWindowMessage(cmd);
        window.parent.postMessage(message, '*');
    };
    /**
     * crea e invia il messagio di LOADING_WINDOW verso l'esterno
     */
    CjIFrameEmbeddingService.prototype.sendLoadingWindowMessage = function (cmd) {
        var message = this.embeddingUtility.createLoadingWindowMessage(cmd);
        window.parent.postMessage(message, '*');
    };
    /**
     * crea e invia il messaggio di GOTO verso l'esterno
     */
    CjIFrameEmbeddingService.prototype.sendGotoMessage = function (cmd) {
        var message = this.embeddingUtility.createGotoMessage(cmd);
        window.parent.postMessage(message, '*');
    };
    CjIFrameEmbeddingService.prototype.isEmbeddingMessage = function (message) {
        return message
            && message.eventId
            && this.knownNdceEvents.indexOf(message.eventId) !== -1;
    };
    CjIFrameEmbeddingService.prototype.transformEventToMessage = function (event) {
        var message;
        switch (event.type) {
            case NbpEmbeddingMessageType.CJ_READY:
                message = this.embeddingUtility.createReadyMessage();
                break;
            case NbpEmbeddingMessageType.CJ_STEP:
                message = this.embeddingUtility.createCjStepMessage(event.body);
                break;
            case NbpEmbeddingMessageType.ERROR:
                message = this.embeddingUtility.createErrorMessage(event.body);
                break;
            case NbpEmbeddingMessageType.GOTO:
                message = this.embeddingUtility.createGotoMessage(event.body);
                break;
            case NbpEmbeddingMessageType.LOADING_WINDOW_START:
                message = this.embeddingUtility.createLoadingWindowMessage('START');
                break;
            case NbpEmbeddingMessageType.LOADING_WINDOW_STOP:
                message = this.embeddingUtility.createLoadingWindowMessage('STOP');
                break;
            case NbpEmbeddingMessageType.MODAL_WINDOW_SHOW:
                message = this.embeddingUtility.createModalWindowMessage('SHOW');
                break;
            case NbpEmbeddingMessageType.MODAL_WINDOW_HIDE:
                message = this.embeddingUtility.createModalWindowMessage('HIDE');
                break;
            case NbpEmbeddingMessageType.PAGE_SIZE:
                message = this.embeddingUtility.createPageSizeMessage(event.body);
                break;
        }
        return message;
    };
    CjIFrameEmbeddingService.prototype.transformMessageToEvent = function (message) {
        var event;
        switch (message.eventId) {
            case 'MODAL_WINDOW':
                return message.body.cmd === 'SHOW'
                    ? { type: NbpEmbeddingMessageType.MODAL_WINDOW_SHOW }
                    : { type: NbpEmbeddingMessageType.MODAL_WINDOW_HIDE };
            case 'PAGE_SCROLL':
                return {
                    type: NbpEmbeddingMessageType.PAGE_SCROLL,
                    body: message.body,
                };
            case 'FLOATING_MENU':
                return message.body.cmd === 'on'
                    ? { type: NbpEmbeddingMessageType.FLOATING_MENU_ON }
                    : { type: NbpEmbeddingMessageType.FLOATING_MENU_OFF };
            case 'SET_FONT_SIZE':
                return {
                    type: NbpEmbeddingMessageType.SET_FONT_SIZE,
                    body: message.body,
                };
            case 'SET_CONTRAST':
                return message.body.contrast === 'on'
                    ? { type: NbpEmbeddingMessageType.SET_CONTRAST_ON }
                    : { type: NbpEmbeddingMessageType.SET_CONTRAST_OFF };
            case 'ERROR':
                return {
                    type: NbpEmbeddingMessageType.ERROR,
                    body: message.body,
                };
        }
    };
    return CjIFrameEmbeddingService;
}());
CjIFrameEmbeddingService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [CjEmbeddingUtility, NbpEmbeddingService])
], CjIFrameEmbeddingService);
export { CjIFrameEmbeddingService };
