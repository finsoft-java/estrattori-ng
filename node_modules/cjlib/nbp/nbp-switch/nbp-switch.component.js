var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { coerceBooleanProperty } from './../../utility/lib-utility';
/** intero autogenerato usato per id unici per nbpInput component */
var nextId = 0;
var NbpSwitchComponent = (function () {
    function NbpSwitchComponent() {
        /**
         * Identificativo univoco per il text field.
         * Se nessun id è fornito e' auto-generato.
         */
        this.id = "nbp-switch-" + ++nextId;
        // *
        //  * Rappresenta l’oggetto associato al pulsante di switch selezionato.
        // @Input() nbpSelected: String;
        /**
         * Funzione associata all’evento di click su un pulsante di switch.
         */
        this.nbpClickFn = new EventEmitter();
        this._switchType = NpbSwitchDispalyType;
    }
    Object.defineProperty(NbpSwitchComponent.prototype, "disabled", {
        /**
         *Booleano che abilita/disabilita le funzionalità del radio button
         */
        get: function () { return this.nbpDisabled; },
        set: function (value) { this.nbpDisabled = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbpSwitchComponent.prototype, "nbpTextUp", {
        /**
         * Booleano abilita l'andata a capo del testo
         */
        get: function () { return this._nbpTextUp; },
        set: function (value) { this._nbpTextUp = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    NbpSwitchComponent.prototype.ngOnInit = function () {
        if (this.nbpOptionList && this.nbpOptionList.length < 2) {
            console.warn('Componente NbpSwitchComponent istanziato con una sola option!');
        }
        if (!(this.nbpSelectedValue === null ||
            typeof this.nbpSelectedValue === 'undefined')) {
            // for (let index in this.nbpOptionList) {
            for (var optionIndex = 0; optionIndex < this.nbpOptionList.length; optionIndex++) {
                if (this.nbpOptionList[optionIndex].value === this.nbpSelectedValue) {
                    this._buttonSelectedIndex = optionIndex;
                    break;
                }
            }
        }
    };
    NbpSwitchComponent.prototype.onSelectButton = function (index, selectedValue) {
        this._buttonSelectedIndex = index;
        this.nbpClickFn.emit(selectedValue);
        this.nbpSelectedValue = selectedValue;
    };
    NbpSwitchComponent.prototype._showIcon = function () {
        return this.nbpDisplayType === NpbSwitchDispalyType.ICON;
    };
    NbpSwitchComponent.prototype._showText = function () {
        return this.nbpDisplayType === NpbSwitchDispalyType.TEXT;
    };
    NbpSwitchComponent.prototype._showIconAndText = function () {
        return this.nbpDisplayType === NpbSwitchDispalyType.ICON_TEXT;
    };
    NbpSwitchComponent.prototype._showTextUp = function () {
        return (this.nbpDisplayType === NpbSwitchDispalyType.ICON_TEXT && this.nbpTextUp);
    };
    return NbpSwitchComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSwitchComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], NbpSwitchComponent.prototype, "nbpOptionList", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSwitchComponent.prototype, "nbpSelectedValue", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSwitchComponent.prototype, "nbpDisplayType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], NbpSwitchComponent.prototype, "disabled", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSwitchComponent.prototype, "nbpClickFn", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], NbpSwitchComponent.prototype, "nbpTextUp", null);
NbpSwitchComponent = __decorate([
    Component({
        selector: 'nbp-switch',
        template: "<div class=\"switch-container btn-group\"><button *ngFor=\"let currentOption of nbpOptionList; let i = index;\" [id]=\"id\" class=\"btn\" [ngClass]=\"{ 'switch-button-text': _showText(), 'switch-button-icontext': _showIconAndText(), 'switch-button-icon': _showIcon(), 'inline-text-icon': !_showTextUp(), 'block-text-icon': _showTextUp(), 'default':_buttonSelectedIndex !== i, 'primary':  _buttonSelectedIndex == i }\" [disabled]=\"disabled\" (click)=\"onSelectButton(i, currentOption.value)\"><span *ngIf=\"!_showIcon()\" class=\"switch-label-icon\" [ngClass]=\"{'switch-label': !_showTextUp()}\">{{currentOption.label}}</span> <span *ngIf=\"!_showText()\" [ngClass]=\"{'switch-icon-text-up': _showTextUp()}\" class=\"icon switch-icon {{currentOption?.icon}}\"></span></button></div>",styles: [".btn[disabled]{box-shadow:none!important;pointer-events:none;curson:not-allowed}.switch-button-text{text-align:center;position:relative;font-weight:700;font-size:.75em;margin:0!important;padding-top:1em;padding-bottom:1em;line-height:1;outline:0!important;min-width:9.584em;height:4.167em;z-index:0}.switch-button-text:active{box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-button-text .btn{border-radius:.125em!important}.switch-button-text.primary{color:#fff;background-color:#258900;border-color:#258900;box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-button-text.default{color:#6f6f6f;background-color:#fff;border-color:#ccc}.switch-button-text[disabled]{box-shadow:none}.switch-button-text.default[disabled]:hover{background-color:#fff!important;border-color:#ccc!important}.switch-button-text.primary[disabled]:hover{background-color:#258900!important;border-color:#258900!important}.switch-button-icontext{position:relative;font-weight:700;font-size:.75em;margin:0!important;padding-top:1em;padding-bottom:1em;line-height:1;outline:0!important;min-width:6.875em;height:4.167em;z-index:0}.switch-button-icontext:active{box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-button-icontext.block-text-icon{padding-top:.416em}.switch-button-icontext.inline-text-icon{padding-top:1em}.switch-button-icontext .switch-label{padding-right:.625em}.switch-button-icontext .switch-label-icon{padding-bottom:.416em;display:table-cell!important;vertical-align:middle}.switch-button-icontext .switch-icon{font-size:2.084em!important;display:table-cell!important}.switch-button-icontext .switch-icon-text-up{display:block!important;padding-bottom:.208em!important}.switch-button-icontext .btn{border-radius:.125em!important}.switch-button-icontext.primary{color:#fff;background-color:#258900;border-color:#258900;box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-button-icontext.default{color:#6f6f6f;background-color:#fff;border-color:#ccc}.switch-button[disabled]{box-shadow:none}.switch-button-icontext.default[disabled]:hover{background-color:#fff!important;border-color:#ccc!important}.switch-button-icontext.primary[disabled]:hover{background-color:#258900!important;border-color:#258900!important}.switch-button-icon{position:relative;font-weight:700;font-size:.75em;margin:0!important;padding-top:1em;padding-bottom:1em;line-height:1;outline:0!important;min-width:6.25em;height:4.167em;z-index:0}.switch-button-icon:active{box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-button-icon .switch-icon{font-size:2.084em!important}.switch-button-icon .btn{border-radius:2px!important}.switch-button-icon.primary{color:#fff;background-color:#258900;border-color:#258900;box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-button-icon.default{color:#6f6f6f;background-color:#fff;border-color:#ccc}.switch-button[disabled]{box-shadow:none}.switch-button-icon.default[disabled]:hover{background-color:#fff!important;border-color:#ccc!important}.switch-button-icon.primary[disabled]:hover{background-color:#258900!important;border-color:#258900!important}:host-context(.contrasto-on) .switch-button-icon.default,:host-context(.contrasto-on) .switch-button-icontext.default,:host-context(.contrasto-on) .switch-button-text.default{color:#000;background-color:#fff;border-color:#000}:host-context(.contrasto-on) .switch-binary,:host-context(.contrasto-on) .switch-button-icon.primary,:host-context(.contrasto-on) .switch-button-icontext.primary,:host-context(.contrasto-on) .switch-button-text.primary{color:#fff;background-color:#000;border-color:#fff}:host-context(.contrasto-on) .slider-box{background-color:#fff;border-color:#000}:host-context(.contrasto-on) .switch-binary .switch-label-icon-on{color:#fff}:host-context(.contrasto-on) .switch-binary .switch-label-icon-off{color:#fff}:host-context(.contrasto-on) .switch-binary-true{background-color:#000} /*# sourceMappingURL=nbp-switch.component.css.map */ "]
    }),
    __metadata("design:paramtypes", [])
], NbpSwitchComponent);
export { NbpSwitchComponent };
export var NpbSwitchDispalyType;
(function (NpbSwitchDispalyType) {
    NpbSwitchDispalyType[NpbSwitchDispalyType["TEXT"] = 0] = "TEXT";
    NpbSwitchDispalyType[NpbSwitchDispalyType["ICON"] = 1] = "ICON";
    NpbSwitchDispalyType[NpbSwitchDispalyType["ICON_TEXT"] = 2] = "ICON_TEXT";
})(NpbSwitchDispalyType || (NpbSwitchDispalyType = {}));
