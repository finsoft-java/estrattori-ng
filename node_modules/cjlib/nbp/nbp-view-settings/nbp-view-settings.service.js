var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import { NbpEmbeddingMessageType, NbpFontSize } from '../nbp-commons/nbp-commons.enums';
import 'rxjs/add/operator/filter';
import { NbpEmbeddingService } from './../nbp-embedding/nbp-embedding.service';
var NbpViewSettingsService = (function () {
    function NbpViewSettingsService(embeddingService) {
        this.embeddingService = embeddingService;
        // TODO: Meglio un BehaviorSubject?
        this._contrast$ = new Subject();
        this._fontSize$ = new Subject();
        this.receiveEvents();
    }
    NbpViewSettingsService.prototype.receiveEvents = function () {
        var _this = this;
        this.embeddingService.getIncomingEventStream().filter(function (event) {
            return (event.type === NbpEmbeddingMessageType.SET_CONTRAST_ON || event.type === NbpEmbeddingMessageType.SET_CONTRAST_OFF);
        })
            .subscribe(function (event) {
            var isContrastoOn = event.type === NbpEmbeddingMessageType.SET_CONTRAST_ON ? true : false;
            _this.notifyContrastoEvent(isContrastoOn);
        });
        this.embeddingService.getIncomingEventStream().filter(function (event) {
            return (event.type === NbpEmbeddingMessageType.SET_FONT_SIZE);
        })
            .subscribe(function (event) {
            var fontSize = event.body.fontSize;
            _this.notifyFontSizeEvent(fontSize);
            _this.embeddingService.notifyOutgoingEvent({
                type: NbpEmbeddingMessageType.PAGE_SIZE,
                body: _this.getPageHeight()
            });
        });
    };
    NbpViewSettingsService.prototype.getPageHeight = function () {
        var resize;
        var element = document.getElementById('nbp-wrapper-container') ? document.getElementById('nbp-wrapper-container') : document.getElementById('body-container');
        if (element) {
            resize = element.clientHeight + 100 + 'px';
        }
        return resize;
    };
    NbpViewSettingsService.prototype.getContrastoEventStream = function () {
        return this._contrast$.asObservable();
    };
    NbpViewSettingsService.prototype.notifyContrastoEvent = function (isContrastoOn) {
        this._contrast$.next(isContrastoOn);
    };
    NbpViewSettingsService.prototype.getFontSizeEventStream = function () {
        return this._fontSize$.asObservable();
    };
    NbpViewSettingsService.prototype.notifyFontSizeEvent = function (fontSize) {
        var pxFontSize;
        switch (fontSize) {
            case NbpFontSize.SMALL:
                pxFontSize = '16px';
                break;
            case NbpFontSize.MEDIUM:
                pxFontSize = '19px';
                break;
            case NbpFontSize.LARGE:
                pxFontSize = '22px';
                break;
            default:
                pxFontSize = '16px';
                break;
        }
        this._fontSize$.next(pxFontSize);
    };
    return NbpViewSettingsService;
}());
NbpViewSettingsService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [NbpEmbeddingService])
], NbpViewSettingsService);
export { NbpViewSettingsService };
