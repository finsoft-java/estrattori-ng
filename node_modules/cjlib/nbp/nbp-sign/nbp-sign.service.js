var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { NbpSpilayerService } from './nbp-spilayer.service';
var NbpSignService = (function () {
    function NbpSignService(spilayerService) {
        this.spilayerService = spilayerService;
    }
    NbpSignService.prototype.signFDR = function (xml) {
        var printResult = this.spilayerService.openBrowser(xml);
        return (printResult);
    };
    NbpSignService.prototype.signFEA = function (xml, secondActivation) {
        var printResult = true;
        if (!secondActivation) {
            printResult = this.spilayerService.printContract(xml);
        }
        if (printResult) {
            this.spilayerService.showISPADContratti();
        }
        return (printResult);
    };
    NbpSignService.prototype.signCartacea = function (xml) {
        return this.spilayerService.printContract(xml);
    };
    return NbpSignService;
}());
NbpSignService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [NbpSpilayerService])
], NbpSignService);
export { NbpSignService };
