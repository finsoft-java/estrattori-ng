var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, ElementRef, Input, Output, EventEmitter } from '@angular/core';
import Utils from '../utils';
import * as Hammer from 'hammerjs';
var NbpSliderStoricoPickerDirective = (function () {
    function NbpSliderStoricoPickerDirective(el) {
        this.el = el;
        this.min = 0;
        this.max = 100;
        this.opts = {};
        this.pos = 0;
        this.onChange = new EventEmitter();
        this.onFinish = new EventEmitter();
        this.lastX = 0;
        this.currentValue = 0;
        this.isInit = false;
        this.range = 100;
        this.onTouchDragHanlder = this.onTouchDragHanlder.bind(this);
        this.setTriggerValue = this.setTriggerValue.bind(this);
    }
    NbpSliderStoricoPickerDirective.prototype.ngOnInit = function () {
        this.touch = new Hammer(this.el.nativeElement);
        /* Init Data */
        this.currentPos = this.el.nativeElement.getBoundingClientRect();
        this.range = this.max - this.min;
        /* Set Default Value */
        this.setDefaultValue();
        this.isInit = true;
    };
    NbpSliderStoricoPickerDirective.prototype.ngOnChanges = function () {
        if (this.isInit) {
            /* Re-Render new Value */
            this.setDefaultValue();
        }
    };
    NbpSliderStoricoPickerDirective.prototype.setDefaultValue = function () {
        var nextPos = this.calculateNextPosFromValue(this.defaultValue);
        var newxtPosPerc = nextPos / this.getParent().width * 100;
        this.el.nativeElement.style.left = newxtPosPerc + "%";
    };
    NbpSliderStoricoPickerDirective.prototype.slideStart = function (event) {
        document.ondragstart = function () { return false; };
        document.body.onselectstart = function () { return false; };
        this.touch.off("panleft panright panend");
        /* Touch */
        this.touch.on("panleft panright", this.onTouchDragHanlder);
        this.touch.on("panend", this.setTriggerValue);
    };
    NbpSliderStoricoPickerDirective.prototype.onTouchDragHanlder = function (event) {
        /* Calculate Next X Position */
        var xPos = event.center.x - this.getParent().left;
        this.render(xPos);
    };
    NbpSliderStoricoPickerDirective.prototype.calculateNextValue = function (nextPos) {
        var percentage = (nextPos / this.getParent().width) * 100;
        var range = this.max - this.min;
        var nextValue = ((percentage / 100) * range) + this.min;
        if (nextValue < this.min) {
            return this.min;
        }
        else if (nextValue > this.max) {
            return this.max;
        }
        else {
            if (this.maxValue !== undefined) {
                if (nextValue < this.maxValue) {
                    return nextValue;
                }
                else {
                    return this.maxValue;
                }
            }
            if (this.minValue !== undefined) {
                if (nextValue > this.minValue) {
                    return nextValue;
                }
                else {
                    return this.minValue;
                }
            }
            return nextValue;
        }
    };
    NbpSliderStoricoPickerDirective.prototype.calculateTriggerValue = function (value) {
        return Utils.calculateTriggerValue(value, this.opts);
    };
    NbpSliderStoricoPickerDirective.prototype.setTriggerValue = function (e) {
        var _this = this;
        /* Move Picker */
        setTimeout(function () {
            var value = _this.calculateTriggerValue(_this.defaultValue);
            _this.onFinish.emit({ pos: _this.pos, value: value, index: _this.index });
        }, 2);
    };
    NbpSliderStoricoPickerDirective.prototype.calculateNextPosFromValue = function (value) {
        // return ((value - this.min)/ this.range) * 100;
        return ((value - this.min) / this.range) * this.getParent().width;
    };
    NbpSliderStoricoPickerDirective.prototype.render = function (nextPos) {
        /* Update Value */
        var value = this.calculateNextValue(nextPos);
        /* Move Picker */
        this.onChange.emit({ pos: this.pos, value: value, index: this.index });
    };
    NbpSliderStoricoPickerDirective.prototype.getParent = function () {
        return this.el.nativeElement.parentElement.getBoundingClientRect();
    };
    return NbpSliderStoricoPickerDirective;
}());
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSliderStoricoPickerDirective.prototype, "min", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSliderStoricoPickerDirective.prototype, "max", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSliderStoricoPickerDirective.prototype, "minValue", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSliderStoricoPickerDirective.prototype, "maxValue", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSliderStoricoPickerDirective.prototype, "opts", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSliderStoricoPickerDirective.prototype, "pos", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSliderStoricoPickerDirective.prototype, "defaultValue", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpSliderStoricoPickerDirective.prototype, "index", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSliderStoricoPickerDirective.prototype, "onChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSliderStoricoPickerDirective.prototype, "onFinish", void 0);
NbpSliderStoricoPickerDirective = __decorate([
    Directive({
        selector: '[nbpSliderStoricoPicker]',
        host: {
            '(mousedown)': 'slideStart($event)',
            '(touchstart)': 'slideStart($event)'
        }
    }),
    __metadata("design:paramtypes", [ElementRef])
], NbpSliderStoricoPickerDirective);
export { NbpSliderStoricoPickerDirective };
