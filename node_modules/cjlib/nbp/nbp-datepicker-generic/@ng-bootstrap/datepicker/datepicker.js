var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef, forwardRef, EventEmitter, Output, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbCalendar } from './ngb-calendar';
import { NgbDate } from './ngb-date';
import { NgbDatepickerService } from './datepicker-service';
import { NgbDatepickerKeyMapService } from './datepicker-keymap-service';
import { NavigationEvent } from './datepicker-view-model';
import { toInteger } from '../util/util';
import { NgbDatepickerConfig } from './datepicker-config';
import { NgbDatepickerI18n } from './datepicker-i18n';
import { isChangedDate } from './datepicker-tools';
var NGB_DATEPICKER_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return RplDatepicker; }),
    multi: true
};
/**
 * A lightweight and highly configurable datepicker directive
 */
var RplDatepicker = (function () {
    function RplDatepicker(_keyMapService, _service, _calendar, i18n, config, _cd, _elementRef) {
        var _this = this;
        this._keyMapService = _keyMapService;
        this._service = _service;
        this._calendar = _calendar;
        this.i18n = i18n;
        this._cd = _cd;
        this._elementRef = _elementRef;
        /**
         * An event fired when navigation happens and currently displayed month changes.
         * See NgbDatepickerNavigateEvent for the payload info.
         */
        this.navigate = new EventEmitter();
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this.dayTemplate = config.dayTemplate;
        this.displayMonths = config.displayMonths;
        this.firstDayOfWeek = config.firstDayOfWeek;
        this.markDisabled = config.markDisabled;
        this.minDate = config.minDate;
        this.maxDate = config.maxDate;
        this.navigation = config.navigation;
        this.outsideDays = config.outsideDays;
        this.showWeekdays = config.showWeekdays;
        this.showWeekNumbers = config.showWeekNumbers;
        this.startDate = config.startDate;
        this._subscription = _service.model$.subscribe(function (model) {
            var newDate = model.firstDate;
            var oldDate = _this.model ? _this.model.firstDate : null;
            var newSelectedDate = model.selectedDate;
            var oldSelectedDate = _this.model ? _this.model.selectedDate : null;
            _this.model = model;
            // handling selection change
            if (isChangedDate(newSelectedDate, oldSelectedDate)) {
                _this.onTouched();
                _this.onChange(newSelectedDate ? { year: newSelectedDate.year, month: newSelectedDate.month, day: newSelectedDate.day } :
                    null);
            }
            // emitting navigation event if the first month changes
            if (!newDate.equals(oldDate)) {
                _this.navigate.emit({
                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,
                    next: { year: newDate.year, month: newDate.month }
                });
            }
            _cd.markForCheck();
        });
    }
    /**
     * Manually focus the datepicker
     */
    RplDatepicker.prototype.focus = function () { this._elementRef.nativeElement.focus(); };
    RplDatepicker.prototype.getHeaderHeight = function () {
        var h = this.showWeekdays ? 6.25 : 4.25;
        return this.displayMonths === 1 || this.navigation !== 'select' ? h - 2 : h;
    };
    RplDatepicker.prototype.getHeaderMargin = function () {
        var m = this.showWeekdays ? 2 : 0;
        return this.displayMonths !== 1 || this.navigation !== 'select' ? m + 2 : m;
    };
    /**
     * Navigates current view to provided date.
     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
     * If nothing or invalid date provided calendar will open current month.
     * Use 'startDate' input as an alternative
     */
    RplDatepicker.prototype.navigateTo = function (date) {
        this._service.open(date ? new NgbDate(date.year, date.month, 1) : this._calendar.getToday());
    };
    RplDatepicker.prototype.ngOnDestroy = function () { this._subscription.unsubscribe(); };
    RplDatepicker.prototype.ngOnInit = function () {
        if (this.model === undefined) {
            this._service.displayMonths = toInteger(this.displayMonths);
            this._service.markDisabled = this.markDisabled;
            this._service.firstDayOfWeek = this.firstDayOfWeek;
            this._setDates();
        }
    };
    RplDatepicker.prototype.ngOnChanges = function (changes) {
        if (changes['displayMonths']) {
            this._service.displayMonths = toInteger(this.displayMonths);
        }
        if (changes['markDisabled']) {
            this._service.markDisabled = this.markDisabled;
        }
        if (changes['firstDayOfWeek']) {
            this._service.firstDayOfWeek = this.firstDayOfWeek;
        }
        this._setDates();
    };
    RplDatepicker.prototype.onDateSelect = function (date) {
        this._service.focus(date);
        this.writeValue(date);
    };
    RplDatepicker.prototype.onKeyDown = function (event) { this._keyMapService.processKey(event); };
    RplDatepicker.prototype.onNavigateDateSelect = function (date) { this._service.open(date); };
    RplDatepicker.prototype.onNavigateEvent = function (event) {
        switch (event) {
            case NavigationEvent.PREV:
                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 1));
                break;
            case NavigationEvent.NEXT:
                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 1));
                break;
            case NavigationEvent.PREVYEAR:
                this._service.open(this._calendar.getPrev(this.model.firstDate, 'm', 12));
                break;
            case NavigationEvent.NEXTYEAR:
                this._service.open(this._calendar.getNext(this.model.firstDate, 'm', 12));
                break;
        }
    };
    RplDatepicker.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    RplDatepicker.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RplDatepicker.prototype.setDisabledState = function (isDisabled) { this._service.disabled = isDisabled; };
    RplDatepicker.prototype.showFocus = function (focusVisible) { this._service.focusVisible = focusVisible; };
    RplDatepicker.prototype.writeValue = function (value) { this._service.select(value); };
    RplDatepicker.prototype._setDates = function () {
        var startDate = this._service.toValidDate(this.startDate, this._calendar.getToday());
        var minDate = this._service.toValidDate(this.minDate, this._calendar.getPrev(startDate, 'y', 10));
        var maxDate = this._service.toValidDate(this.maxDate, this._calendar.getPrev(this._calendar.getNext(startDate, 'y', 11)));
        this.minDate = { year: minDate.year, month: minDate.month, day: minDate.day };
        this.maxDate = { year: maxDate.year, month: maxDate.month, day: maxDate.day };
        this._service.minDate = minDate;
        this._service.maxDate = maxDate;
        this.navigateTo(startDate);
    };
    return RplDatepicker;
}());
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], RplDatepicker.prototype, "dayTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], RplDatepicker.prototype, "displayMonths", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], RplDatepicker.prototype, "firstDayOfWeek", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], RplDatepicker.prototype, "markDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplDatepicker.prototype, "maxDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplDatepicker.prototype, "minDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], RplDatepicker.prototype, "navigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], RplDatepicker.prototype, "outsideDays", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], RplDatepicker.prototype, "showWeekdays", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], RplDatepicker.prototype, "showWeekNumbers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplDatepicker.prototype, "startDate", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], RplDatepicker.prototype, "navigate", void 0);
RplDatepicker = __decorate([
    Component({
        exportAs: 'rplDatepicker',
        selector: 'rpl-datepicker',
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            'class': 'd-inline-block rounded',
            'tabindex': '0',
            '[attr.tabindex]': 'model.disabled ? undefined : "0"',
            '(blur)': 'showFocus(false)',
            '(focus)': 'showFocus(true)',
            '(keydown)': 'onKeyDown($event)'
        },
        template: "<ng-template #dt let-date=\"date\" let-currentMonth=\"currentMonth\" let-selected=\"selected\" let-disabled=\"disabled\" let-focused=\"focused\"><div ngbDatepickerDayView [date]=\"date\" [currentMonth]=\"currentMonth\" [selected]=\"selected\" [disabled]=\"disabled\" [focused]=\"focused\"></div></ng-template><div class=\"ngb-dp-header bg-faded pt-1 rounded-top\" [style.height.rem]=\"getHeaderHeight()\" [style.marginBottom.rem]=\"-getHeaderMargin()\"><ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\" [date]=\"model.firstDate\" [minDate]=\"model.minDate\" [maxDate]=\"model.maxDate\" [months]=\"model.months.length\" [disabled]=\"model.disabled\" [showWeekNumbers]=\"showWeekNumbers\" [showSelect]=\"navigation === 'select'\" (navigate)=\"onNavigateEvent($event)\" (select)=\"onNavigateDateSelect($event)\"></ngb-datepicker-navigation></div><div class=\"ngb-dp-months d-flex px-1 pb-1\"><ng-template ngFor let-month [ngForOf]=\"model.months\" let-i=\"index\"><div class=\"ngb-dp-month d-block ml-3\"><div *ngIf=\"navigation !== 'select' || displayMonths > 1\" class=\"ngb-dp-month-name text-center\">{{ i18n.getMonthFullName(month.number) }} {{ month.year }}</div><ngb-datepicker-month-view [month]=\"month\" [dayTemplate]=\"dayTemplate || dt\" [showWeekdays]=\"showWeekdays\" [showWeekNumbers]=\"showWeekNumbers\" [outsideDays]=\"(displayMonths === 1 ? outsideDays : 'hidden')\" (select)=\"onDateSelect($event)\"></ngb-datepicker-month-view></div></ng-template></div>",
        styles: [":host{border:1px solid rgba(0,0,0,.125)}.ngb-dp-header{border-bottom:1px solid rgba(0,0,0,.125)}.ngb-dp-month{pointer-events:none}ngb-datepicker-month-view{pointer-events:auto}.ngb-dp-month:first-child{margin-left:0!important}.ngb-dp-month-name{font-size:larger;font:Arial regular;height:2rem;line-height:2rem} /*# sourceMappingURL=datepicker.css.map */ "],
        providers: [NGB_DATEPICKER_VALUE_ACCESSOR, NgbDatepickerService, NgbDatepickerKeyMapService]
    }),
    __metadata("design:paramtypes", [NgbDatepickerKeyMapService, NgbDatepickerService,
        NgbCalendar, NgbDatepickerI18n, NgbDatepickerConfig,
        ChangeDetectorRef, ElementRef])
], RplDatepicker);
export { RplDatepicker };
