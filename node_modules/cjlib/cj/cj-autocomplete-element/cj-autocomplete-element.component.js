var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { getPropertyValueByPath } from './../../utility/lib-utility';
var tabindex = 1;
var CjAutocompleteElementComponent = (function () {
    function CjAutocompleteElementComponent() {
        /**
         * Evento lanciato al click sull'elemento per la selezione
         */
        this.cjOnClickElement = new EventEmitter();
        this._tabindex = ++tabindex;
    }
    CjAutocompleteElementComponent.prototype.ngOnInit = function () {
        this._label = getPropertyValueByPath(this.cjElement, this.cjLabelField);
        this._subtitle = getPropertyValueByPath(this.cjElement, this.cjSubtitleField);
        this._description = getPropertyValueByPath(this.cjElement, this.cjDescriptionField);
        this._optionalLabel = getPropertyValueByPath(this.cjElement, this.cjOptionalLabelField);
    };
    CjAutocompleteElementComponent.prototype._getSencondLine = function () {
        if (this._subtitle && this._description) {
            return this._subtitle + '/' + this._description;
        }
        else if (this._subtitle) {
            return this._subtitle;
        }
        else {
            return this._description;
        }
    };
    CjAutocompleteElementComponent.prototype._onSelectEvent = function (event) {
        this.cjOnClickElement.emit(this.cjElement);
    };
    return CjAutocompleteElementComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjAutocompleteElementComponent.prototype, "cjElement", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteElementComponent.prototype, "cjLabelField", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteElementComponent.prototype, "cjSubtitleField", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteElementComponent.prototype, "cjDescriptionField", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteElementComponent.prototype, "cjOptionalLabelField", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CjAutocompleteElementComponent.prototype, "cjOnClickElement", void 0);
CjAutocompleteElementComponent = __decorate([
    Component({
        selector: 'cj-autocomplete-element',template: "<li id=\"autocompleteElement\" [tabindex]=\"_tabindex\" (click)=\"_onSelectEvent($event)\" (keydown.enter)=\"_onSelectEvent($event)\"><div class=\"row\"><div class=\"col-md-12 col-sm-12 col-xs-12\"><div class=\"row\"><div class=\"col-md-24 col-sm-24 col-xs-24\">{{ _label}}</div></div><div class=\"row\"><div class=\"col-md-24 col-sm-24 col-xs-24\">{{ _getSencondLine() }}</div></div></div><div class=\"col-md-12 col-sm-12 col-xs-12 text-right\"><div class=\"center-vertically\">{{_optionalLabel}}</div></div></div></li>",
        styles: [".center-vertically{padding-top:.625em} /*# sourceMappingURL=cj-autocomplete-element.component.css.map */ "],
    })
], CjAutocompleteElementComponent);
export { CjAutocompleteElementComponent };
