var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter, ElementRef } from '@angular/core';
import { coerceBooleanProperty } from './../../utility/lib-utility';
import { NbpStyle } from './../../nbp/nbp-commons/nbp-commons.enums';
import { INbpAutocompleteDataSource } from './../../nbp/nbp-datasource/nbp-datasource.interfaces';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/debounceTime';
/** intero autogenerato usato per id unici per cjAutocomplete component */
var nextId = 0;
var CjAutocompleteComponent = (function () {
    function CjAutocompleteComponent(_hostElement) {
        this._hostElement = _hostElement;
        this._primary = NbpStyle.PRIMARY;
        this._inputDataStream = new Subject();
        /**
         * Identificativo univoco per l'autocomplete.
         * Se nessun id è fornito e' auto-generato.
         */
        this.id = "cj-autocomplete-" + ++nextId;
        /**
         * Offset del numero di caratteri minimi da digitare per lanciare una ricerca
         * Valore di default: 4
         */
        this.cjMinCharacterOffset = 4;
        /**
         * Tempo di attesa tra l'inserimento dei caratteri e il lancio della ricerca (espresso in ms)
         * Valore di default: 200
         */
        this.cjDelaySearchTime = 200;
        /**
         * Il testo del placeholder.
         */
        this.placeholder = '';
        /**
         * (Opzionale) Titolo del box-tendina dell'autocomplete
         */
        this.cjBoxTitle = 'Risultati della ricerca';
        /**
        * Evento lanciato alla selezione di uno degli elementi dell'autocomplete
        */
        this.cjOnSelectElement = new EventEmitter();
    }
    Object.defineProperty(CjAutocompleteComponent.prototype, "disabled", {
        /**
         * Flag che abilita/disabilita le funzionalità associate all'autocomplete
         */
        get: function () {
            return this._cjDisabled;
        },
        set: function (value) { this._cjDisabled = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CjAutocompleteComponent.prototype, "cjOpened", {
        /**
         * proprietà che determina il fatto che la tendina sia aperta o chiusa
         */
        get: function () { return this._cjOpened; },
        set: function (value) { this._cjOpened = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    CjAutocompleteComponent.prototype._isOpened = function () {
        return this.cjOpened;
    };
    CjAutocompleteComponent.prototype._onFocusEvent = function () {
        // TODO - NECESSARIO?
    };
    CjAutocompleteComponent.prototype._onInputEvent = function () {
        this._inputDataStream.next(this.cjModel);
    };
    CjAutocompleteComponent.prototype._navigateBoxElements = function (event) {
        var firstAutocompleteElement = this._hostElement.nativeElement.querySelector('.first #autocompleteElement');
        firstAutocompleteElement.focus();
    };
    CjAutocompleteComponent.prototype._onSelectElement = function (item) {
        this.cjOnSelectElement.emit(item);
        this.cjModel = '';
        this._cjOpened = false;
    };
    CjAutocompleteComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.cjDataSource.getDataStream().subscribe(function (dataPage) {
            if (!_this._cjOpened) {
                _this._cjOpened = true;
            }
            _this._isSearchEmpty = (!dataPage.data || dataPage.data.length === 0);
            _this._data = dataPage.data.slice();
        });
        this._inputDataStream.asObservable()
            .debounceTime(this.cjDelaySearchTime)
            .subscribe(function (filterString) {
            if (filterString.length > _this.cjMinCharacterOffset) {
                _this.cjDataSource.sendDataEvent(_this.cjFilterField, filterString);
            }
            else {
                _this._cjOpened = false;
            }
        });
    };
    return CjAutocompleteComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteComponent.prototype, "name", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjAutocompleteComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteComponent.prototype, "cjModel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], CjAutocompleteComponent.prototype, "cjMinCharacterOffset", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], CjAutocompleteComponent.prototype, "cjDelaySearchTime", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjAutocompleteComponent.prototype, "placeholder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], CjAutocompleteComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], CjAutocompleteComponent.prototype, "cjOpened", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteComponent.prototype, "cjBoxTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], CjAutocompleteComponent.prototype, "cjElementMappings", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], CjAutocompleteComponent.prototype, "cjFilterField", void 0);
__decorate([
    Input(),
    __metadata("design:type", INbpAutocompleteDataSource)
], CjAutocompleteComponent.prototype, "cjDataSource", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], CjAutocompleteComponent.prototype, "cjOnSelectElement", void 0);
CjAutocompleteComponent = __decorate([
    Component({selector: 'cj-autocomplete',
        template: "<div class=\"row\"><div class=\"col-md-24 col-xs-24 col-sm-24\"><div class=\"autocomplete-container\"><span class=\"icon-inside icomoon-Simboli_Risorsa-20 cursor\" *ngIf=\"cjOpened\" (click)=\"cjOpened = !cjOpened\"></span> <span class=\"icon-inside icomoon-Ricerca_zoom1\" *ngIf=\"!cjOpened\"></span> <input tabindex=\"1\" #autocompleteInput class=\"textfield-box form-control round-borders\" type=\"text\" [name]=\"name\" [id]=\"id\" [(ngModel)]=\"cjModel\" [disabled]=\"_cjDisabled\" [placeholder]=\"placeholder\" (input)=\"_onInputEvent()\"><ul [style.visibility]=\"cjOpened ? 'visible' : 'hidden'\"><div class=\"row\"><div class=\"col-md-24 text-center mrg-t-10 mrg-b-10\"><strong>{{ cjBoxTitle | uppercase }}</strong></div></div><div class=\"row\" *ngIf=\"_isSearchEmpty\"><div class=\"col-md-24 text-center mrg-t-10 mrg-b-10\">La ricerca non ha prodotto risultati</div></div><ng-container *ngFor=\"let item of _data; let i = index; let first = first; let last = last;\"><cj-autocomplete-element [cjElement]=\"item\" [cjLabelField]=\"cjElementMappings?.cjLabelField\" [cjSubtitleField]=\"cjElementMappings?.cjSubtitleField\" [cjDescriptionField]=\"cjElementMappings?.cjDescriptionField\" [cjOptionalLabelField]=\"cjElementMappings?.cjOptionalLabelField\" (cjOnClickElement)=\"_onSelectElement($event)\" [ngClass]=\"{'first': first , 'last': last} \"></cj-autocomplete-element></ng-container></ul></div></div></div>",
        styles: [".autocomplete-container{position:relative}.autocomplete-container ul{opacity:1;background:#fff;border-top-width:0;border-right-color:#323232;border-right-style:solid;border-right-width:1px;border-bottom-color:#323232;border-bottom-style:solid;border-bottom-width:1px;border-left-color:#323232;border-left-style:solid;border-left-width:1px;border-radius:0 0 2px 2px;list-style:none;margin:0 0 .625em 0;padding:0 1.25em 1.625em 1.25em;position:absolute;width:calc(100% - 100px);z-index:1000;overflow-y:auto;max-height:342px;margin-left:50px;top:50px}.autocomplete-container ul ::ng-deep li{font-size:12px;font-weight:700;text-transform:uppercase;cursor:pointer;min-height:3.125em;padding:17px 12px;border-bottom:1px solid #ccc}.autocomplete-container ul ::ng-deep li:hover{background:#c4dbbc}.autocomplete-container ul ::ng-deep li:focus{background:#c4dbbc}.autocomplete-container ul ::ng-deep li.active{background:#89bc72}.autocomplete-container ul ::ng-deep cj-autocomplete-element.last li{border-bottom:1px solid #ccc}.autocomplete-container ul ::ng-deep cj-autocomplete-element.first li{border-top:1px solid #ccc}.autocomplete-container ul.ng-hide-add{transition:all ease-out .25s}.autocomplete-container ul.ng-hide-remove{transition:all ease-out .25s}.autocomplete-container ul.ng-hide{opacity:0;max-height:0}.centered-button{padding-top:5px}.textfield-box{margin:0 0 .625em 0;padding:.375em 1em .375em 1em;color:#6f6f6f;border:1px solid #323232;border-radius:3px;font-size:1em;height:3.125em;box-shadow:none!important}.textfield-box:focus{border:2px solid #89bc72;outline:0;box-shadow:none!important}.textfield-box[disabled]{opacity:.5;background-color:#fff}.round-borders{border-radius:25px}.icon-inside{position:absolute;top:50%;right:25px;font-size:26px;transform:translateY(-50%)}.icon-inside:before{color:#258900}.icon-inside.cursor{cursor:pointer} /*# sourceMappingURL=cj-autocomplete.component.css.map */ "]
    }),
    __metadata("design:paramtypes", [ElementRef])
], CjAutocompleteComponent);
export { CjAutocompleteComponent };
