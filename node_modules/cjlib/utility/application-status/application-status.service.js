var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Inject, Optional } from '@angular/core';
import { APP_ALERT_DEF } from './../../module.config';
import { Observable } from 'rxjs/Observable';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import 'rxjs/add/operator/partition';
var ApplicationStatusService = (function () {
    function ApplicationStatusService(alertDefinition) {
        var _this = this;
        this.alertDefinition = alertDefinition;
        this._errorRaw$ = new BehaviorSubject(null);
        this._globalError$ = new Observable();
        this._applicationAlert$ = new Observable();
        if (alertDefinition) {
            this.appAlertDefinitionFn = alertDefinition.isAnApplicationAlert;
        }
        else {
            this.appAlertDefinitionFn = this.applicationAlertDefinition;
        }
        var errorPartitions = this._errorRaw$.asObservable()
            .partition(function (error) { return _this.appAlertDefinitionFn(error); });
        this._applicationAlert$ = errorPartitions[0];
        this._globalError$ = errorPartitions[1];
    }
    /**
     * Permette di aggiungere un errore
     */
    ApplicationStatusService.prototype.notifyError = function (error) {
        this._errorRaw$.next(error);
    };
    /**
     * Permette di ricevere lo stream degli errori grezzi
     * sia globalError sia ApplicationAlert
     */
    ApplicationStatusService.prototype.getErrorRawStream = function () {
        return this._errorRaw$.asObservable();
    };
    /**
     * Permette di ricevere gli errori globali
     */
    ApplicationStatusService.prototype.getGlobalErrorStream = function () {
        return this._globalError$;
    };
    /**
     * Permette di ricevere gli alert applicativi da visualizzare sul
     * top delle varie pagine
     */
    ApplicationStatusService.prototype.getApplicationAlertStream = function () {
        return this._applicationAlert$;
    };
    /**
     * Definizione dei criteri da usare per distinguere tra errore globale da visualizzare
     * tramite modale di errore e Alert applicativo (errore restituito dal BE es. incongruenza
     * input inseriti)
     * @param {IClientError} error erroreGlobale
     *
     */
    ApplicationStatusService.prototype.applicationAlertDefinition = function (error) {
        return false;
    };
    return ApplicationStatusService;
}());
ApplicationStatusService = __decorate([
    Injectable(),
    __param(0, Inject(APP_ALERT_DEF)), __param(0, Optional()),
    __metadata("design:paramtypes", [Object])
], ApplicationStatusService);
export { ApplicationStatusService };
