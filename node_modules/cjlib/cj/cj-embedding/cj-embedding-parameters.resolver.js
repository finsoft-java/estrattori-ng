var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { NbpFontSize } from './../../nbp/nbp-commons/nbp-commons.enums';
import { CjIFrameEmbeddingService } from './cj-iframe-embedding.service';
import { CjEmbeddingUtility } from './cj-embedding.utility';
var CjEmbeddingParametersResolver = (function () {
    function CjEmbeddingParametersResolver(router, cjIframeEmbeddingService, cjEmbeddingUtility) {
        this.router = router;
        this.cjIframeEmbeddingService = cjIframeEmbeddingService;
        this.cjEmbeddingUtility = cjEmbeddingUtility;
    }
    CjEmbeddingParametersResolver.prototype.resolve = function (route, state) {
        var _this = this;
        var fontSizeParam = route.queryParams['fontSize'] ? route.queryParams['fontSize'] : NbpFontSize.SMALL;
        var fontSize = (NbpFontSize[fontSizeParam]);
        var contrasto = route.queryParams['contrast'] === 'on' ? 'on' : 'off';
        var pageScroll = route.queryParams['pageScroll'] ? route.queryParams['pageScroll'] : 0;
        var headerHeight = route.queryParams['headerHeight'] ? route.queryParams['headerHeight'] : 70;
        var floatingMenu = route.queryParams['floatingMenu'] === 'on' ? 'on' : 'off';
        var messages = new Array();
        messages.push(this.cjEmbeddingUtility.createFontSizeMessage(fontSize));
        messages.push(this.cjEmbeddingUtility.createContrastMessage(contrasto));
        messages.push(this.cjEmbeddingUtility.createPageScrollMessage(pageScroll, headerHeight));
        messages.push(this.cjEmbeddingUtility.createFloatingMenuMessage(floatingMenu));
        messages.forEach(function (message) {
            _this.cjIframeEmbeddingService.notifyIncomingMessage(message);
        });
        return {
            appFontSize: fontSize,
            contrasto: contrasto,
            pageScroll: pageScroll,
            headerHeight: headerHeight,
            floatingMenu: floatingMenu
        };
    };
    CjEmbeddingParametersResolver.prototype.sendMessages = function (MessageMap) {
    };
    return CjEmbeddingParametersResolver;
}());
CjEmbeddingParametersResolver = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [Router,
        CjIFrameEmbeddingService,
        CjEmbeddingUtility])
], CjEmbeddingParametersResolver);
export { CjEmbeddingParametersResolver };
