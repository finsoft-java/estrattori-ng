import { Observable } from 'rxjs/Observable';
export interface IPaginationStatus {
    pageNumber: number;
    pageSize: number;
    totalRecords: number;
}
export interface IDataPage<T> {
    data: T[];
    status?: IPaginationStatus;
}
export declare abstract class INbpDataSource<T> {
    private pageDataSubject;
    abstract getPage(pageNumber?: number, sorting?: string[], pageSize?: number): Observable<IDataPage<T>>;
    sendDataEvent(pageNumber?: number, sortFields?: Array<string>, pageSize?: number): void;
    getDataStream(): Observable<IDataPage<T>>;
}
export declare abstract class INbpAutocompleteDataSource<T> {
    private pageDataSubject;
    abstract getPage(filterFields?: string, filter?: string): Observable<IDataPage<T>>;
    sendDataEvent(filterFields?: string, filter?: string): void;
    getDataStream(): Observable<IDataPage<T>>;
}
export declare abstract class INbpArrayDataSource<T> extends INbpDataSource<T> {
    setData?(newArrayData: Array<T>, pageNumber?: number, sortFields?: Array<string>, pageSize?: number): void;
}
