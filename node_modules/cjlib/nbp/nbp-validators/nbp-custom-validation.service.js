var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
var NbpCustomValidationService = (function () {
    // non possiamo usare la struttura dati MAP perchè non supportata da IE10 
    // quindi occhio ai duplicati 
    // validationErrorKeys = Object.keys(this.validationErrors) --> 'key1', 'key2'
    // {
    //   'key1': 'Errore validazione campo 1',
    //   'key2': 'Errore validazione campo 2',
    // }
    function NbpCustomValidationService() {
        this.validationErrors = {};
    }
    // In caso la chiave esista già, dobbiamo sostituire il placeholder? concatenarlo? controllare che sia lo stesso
    /**
     * [registerError description]
     * Aggiunge la coppia key/placeholder alla struttura dati
     * @param {string} key         [description]
     * @param {string} placeholder [description]
     */
    NbpCustomValidationService.prototype.registerError = function (key, placeholder) {
        this.validationErrors[key] = placeholder;
    };
    /**
     * Eliminazione di una coppia key/placeholder
     * @param  {string}  key [description]
     * @return {boolean}     [description]
     */
    NbpCustomValidationService.prototype.clearError = function (key) {
        return delete this.validationErrors[key];
    };
    /**
     * Pulizia della struttura dati
     */
    NbpCustomValidationService.prototype.clearErrors = function () {
        this.validationErrors = {};
    };
    /**
     * Restituisce una stringa che rappresenta il placeholder oppure undefined se non c'è la key cercata
     * @param  {string} key [description]
     * @return {string}     [description]
     */
    NbpCustomValidationService.prototype.getValidationPlaceholder = function (key) {
        return this.validationErrors[key];
    };
    return NbpCustomValidationService;
}());
NbpCustomValidationService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], NbpCustomValidationService);
export { NbpCustomValidationService };
