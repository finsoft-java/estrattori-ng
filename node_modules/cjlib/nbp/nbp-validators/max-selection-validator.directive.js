var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
var MaxSelectionValidator = MaxSelectionValidator_1 = (function () {
    function MaxSelectionValidator() {
    }
    MaxSelectionValidator.prototype.validate = function (control) {
        if (this.maxSelection && control.value && control.value.length > this.maxSelection) {
            return {
                maxSelection: "E' possibile selezionare al massimo " + this.maxSelection + " elementi"
            };
        }
        else {
            return null;
        }
    };
    return MaxSelectionValidator;
}());
__decorate([
    Input(),
    __metadata("design:type", String)
], MaxSelectionValidator.prototype, "maxSelection", void 0);
MaxSelectionValidator = MaxSelectionValidator_1 = __decorate([
    Directive({
        selector: 'nbp-combo-multi[maxSelection][ngModel], nbp-combo-multi[maxSelection][formControlName], nbp-combo-multi[maxSelection][formControl]',
        providers: [
            { provide: NG_VALIDATORS, useExisting: forwardRef(function () { return MaxSelectionValidator_1; }), multi: true }
        ]
    })
], MaxSelectionValidator);
export { MaxSelectionValidator };
var MaxSelectionValidator_1;
