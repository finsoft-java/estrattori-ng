import { ElementRef, EventEmitter, Injector } from '@angular/core';
import { NgModel, NgControl } from '@angular/forms';
import { AsyncValidatorArray, ValidatorArray } from './../nbp-commons/nbp-validator';
import { NbpInputElementBase } from './../nbp-commons/nbp-input-element-base';
import { INbpInput } from './../nbp-commons/nbp-commons.interface';
import { Observable } from 'rxjs/Observable';
import { NbpFormContainerComponent } from './../nbp-form-container/nbp-form-container.component';
import { EnabledRangeService } from './nbp-enabled-range.service';
import { NgbInputDatepicker, NgbDateStruct } from './@ng-bootstrap/datepicker/datepicker-reply.module';
/**
 * Provider Expression that allows nbp-calendar-generic to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
export declare const NBP_CALENDAR_CONTROL_VALUE_ACCESSOR: any;
export declare const NBP_INPUT_CALENDAR_ELEMENT_BASE: any;
export declare class NbpCalendarGenericComponent extends NbpInputElementBase<any> implements INbpInput {
    private enabledRange;
    private validatori;
    private asyncValidatori;
    private parentFormContainer;
    private element;
    private inj;
    /**
    * (Opzionale)
    * Attributo HTML standard: definisce il pattern di validazione del campo di input
    */
    pattern: RegExp;
    /**
    * Nome del campo di input associato al calendar.
    */
    name: string;
    /**
     * Identificativo univoco per il text field.
     * Se nessun id è fornito e' auto-generato.
     */
    id: string;
    _nbpShowValidation: boolean;
    /**
   * (Opzionale)
   * Booleano che consente di visualizzare i messaggi di feedback relativi alla validazione.
   * Valore di default false
   */
    nbpShowValidation: boolean;
    /**
     * testo del placeholder
     * Valore di Default: "dd.mm.yyyy"
     */
    placeholder: string;
    /**
     * (Opzionale) Messaggio di errore da visualizzare in caso di campo non valido
     * Valore di Default: "Cmpo obbligatorio o invalido"
     */
    nbpErrorMessage: string;
    showErrorLabel: boolean;
    ngbMaxDate: NgbDateStruct;
    nbpMaxDate: Date;
    /**
     * La massima data accettata dal componente e visualizzata nel calendario
     * Valore di Default: 31.12.2050
     */
    readonly maxDate: Date;
    ngbMinDate: NgbDateStruct;
    nbpMinDate: Date;
    /**
     * La minima data accettata dal componente e visualizzata nel calendario
     * Valore di Default: 01.01.1970
     */
    readonly minDate: Date;
    _startDateEnabled: any;
    /**
     * Data di inizio delle date abilitate/selezionabili.
     */
    startDateEnabled: any;
    _endDateEnabled: any;
    /**
     * Data di fine delle date abilitate/selezionabili.
     */
    endDateEnabled: any;
    private _nbpDisabled;
    /**
     * Flag che abilita/disabilita le funzionalità associate al calendar
     */
    disabled: boolean;
    private _nbpRequired;
    /**
     * Flag che imposta come obbligatorio o meno il campo di input (disabilitato) associato al calendar
     */
    required: boolean;
    nbpOnNavigate: EventEmitter<{
        current: any;
        next: any;
    }>;
    invalid: Observable<boolean>;
    ngControl: NgControl;
    rplDatepicker: NgbInputDatepicker;
    model: NgModel;
    /**
     * (Opzionale) Paramentro da valorizzare per abilitare l'autofocus sul rispettivo campo.
     */
    firstFocus: boolean;
    /**
     * Parametro usato per attivare e disattivare il focus al tab.
     */
    focusOn: boolean;
    /**
     * (Opzionale) Paramentro che indica l'ordine di spostamento da un campo all'altro attraverso il tab.
     */
    tabindex: number;
    private elementRef;
    _ngbModel: any;
    ngOnInit(): void;
    constructor(enabledRange: EnabledRangeService, validatori: ValidatorArray, asyncValidatori: AsyncValidatorArray, parentFormContainer: NbpFormContainerComponent, element: ElementRef, inj: Injector);
    validaData(data: any): boolean;
    _ngbModelChanged(event: NgbDateStruct): void;
    private parseDateFromDateStruct(value);
    _onNavigate(navigateEvent: {
        current: NgbDateStruct;
        next: NgbDateStruct;
    }): void;
}
