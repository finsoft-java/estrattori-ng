var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
/**
 * Servizio Mock di collegamento con ActiveX SPILayerMulticanale
 */
var SpilayerMockUtilityService = (function () {
    function SpilayerMockUtilityService() {
        this._activeXId = 'MockActveX';
        // Per ora non usati, forse per usarli dovremmo ritornare degli observavle<boolean> al posto
        // di boolean
        this._spilayerEventStream = new BehaviorSubject('');
        this._spilayerSignResultStream = new BehaviorSubject({ event: '', result: false });
    }
    Object.defineProperty(SpilayerMockUtilityService.prototype, "activeXId", {
        // ADD EVENT_STREAM (implementato)
        // in firmdebug, ancora da implementare --> add SIGN_RESULT_STREAM
        get: function () {
            return this._activeXId;
        },
        set: function (id) {
            this._activeXId = id;
        },
        enumerable: true,
        configurable: true
    });
    SpilayerMockUtilityService.prototype.linkActiveXReference = function () {
        console.log('Mock linkActiveXReference()');
    };
    SpilayerMockUtilityService.prototype.isActiveXInstantiated = function () {
        return true;
    };
    SpilayerMockUtilityService.prototype.isISPADContrattiEnabled = function () {
        this._spilayerEventStream.next('isISPADContrattiEnabled');
        var result = confirm("Operazione isISPADContrattiEnabled (mock) selezionare valore di ritorno.\n \n                         Ok     -> response true \n \n                         Cancel -> response false");
        console.log("Risultato dell'operazione isISPADContrattiEnabled " + result);
        return result;
    };
    SpilayerMockUtilityService.prototype.printContract = function (xml) {
        this._spilayerEventStream.next('printContract');
        var result = confirm("Firma FEA - Operazione PrintContract (mock) selezionare valore di ritorno.\n \n                         Ok     -> response true \n \n                         Cancel -> response false");
        console.log("Risultato dell'operazione PrintContract " + result);
        return result;
    };
    SpilayerMockUtilityService.prototype.setLeanBankingEndPoint = function (endPoint, port) {
        this._spilayerEventStream.next('setLeanBankingEndPoint');
        console.log("SpilayerMockUtilityService - setLeanBankingEndPoint");
        alert("Invocazione Operazione setLeanBankingEndPoint (mock).");
    };
    SpilayerMockUtilityService.prototype.printDatiXml = function (xml, sincrono, descrizione) {
        this._spilayerEventStream.next('printDatiXml');
        var result = confirm("Firma FEA - Operazione printDatiXml (mock) selezionare valore di ritorno.\n \n                         Ok     -> response true \n \n                         Cancel -> response false");
        console.log("Risultato dell'operazione printDatiXml " + result);
        return result;
    };
    SpilayerMockUtilityService.prototype.openBrowser = function (xml) {
        this._spilayerEventStream.next('openBrowser');
        var result = confirm("Firma FDR - Operazione openBrowser (mock) selezionare valore di ritorno.\n \n                         Ok -> response true \n \n                         Cancel -> response false");
        console.log("Risultato dell'operazione openBrowser " + result);
        return result;
    };
    SpilayerMockUtilityService.prototype.isPadPresent = function () {
        this._spilayerEventStream.next('isPadPresent');
        var result = confirm("Firma FEA - Operazione isPadPresent (mock) selezionare valore di ritorno.\n \n                         Ok     -> response true \n \n                         Cancel -> response false");
        console.log("Risultato dell'operazione isPadPresent " + result);
        return result;
    };
    SpilayerMockUtilityService.prototype.isTabletPresent = function () {
        this._spilayerEventStream.next('isTabletPresent');
        var result = confirm("Firma FEA - Operazione isTabletPresent (mock) selezionare valore di ritorno.\n \n                         Ok     -> response true \n \n                         Cancel -> response false");
        console.log("Risultato dell'operazione isTabletPresent " + result);
        return result;
    };
    SpilayerMockUtilityService.prototype.closeBrowser = function (caption, message, type) {
        this._spilayerEventStream.next('closeBrowser');
        console.log("SpilayerMockUtilityService - closeBrowser");
        alert("Invocazione Operazione closeBrowser (mock).");
    };
    SpilayerMockUtilityService.prototype.showISPADContratti = function () {
        this._spilayerEventStream.next('showISPADContratti');
        console.log("SpilayerMockUtilityService - showISPADContratti");
        alert("Invocazione Operazione showISPADContratti (mock).");
    };
    return SpilayerMockUtilityService;
}());
SpilayerMockUtilityService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], SpilayerMockUtilityService);
export { SpilayerMockUtilityService };
