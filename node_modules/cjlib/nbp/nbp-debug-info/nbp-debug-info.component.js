var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input } from '@angular/core';
import { NbpStyle } from './../nbp-commons/nbp-commons.enums';
var NbpDebugInfoComponent = (function () {
    function NbpDebugInfoComponent() {
        this._primary = NbpStyle.PRIMARY;
        this._copyMessage = null;
        this._isErrorCopied = false;
    }
    NbpDebugInfoComponent.prototype.ngOnChanges = function (changes) {
        if (changes.nbpError) {
            this._copyMessage = null;
            this._isErrorCopied = true;
        }
    };
    NbpDebugInfoComponent.prototype.copyText = function (event) {
        var _this = this;
        var a = document.getElementById('error-infobox');
        try {
            a.select();
            document.execCommand('copy');
            if (document.selection) {
                document.selection.empty();
            }
            else if (window.getSelection) {
                window.getSelection().removeAllRanges();
            }
            this._copyMessage = 'Errore copiato correttamente nella clipboard.';
            this._isErrorCopied = true;
        }
        catch (err) {
            this._copyMessage = 'Problemi durante la copia del testo. Ritentare.';
            this._isErrorCopied = false;
        }
        setTimeout(function () {
            _this._copyMessage = null;
            _this._isErrorCopied = null;
        }, 5000);
    };
    return NbpDebugInfoComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpDebugInfoComponent.prototype, "nbpError", void 0);
NbpDebugInfoComponent = __decorate([
    Component({
        selector: 'nbp-debug-info',template: "<textarea class=\"info-box\" id=\"error-infobox\" readonly=\"readonly\">{{nbpError | json}}</textarea><div class=\"row\"><div class=\"col-xs-4 col-xs-offset-10 text-center mrg-t-15\"><nbp-button nbpLabel=\"Copia Errore\" [nbpStyle]=\"_primary\" (nbpClick)=\"copyText($event)\"></nbp-button></div><div class=\"col-md-24 text-center mrg-t-15\"><div class=\"row mrg-t-15\"><div *ngIf=\"!!_copyMessage\" class=\"col-md-24\"><span class=\"copy-error-message\" [ngClass]=\"{'success':_isErrorCopied , 'unsuccess':!_isErrorCopied}\">{{ _copyMessage }}</span></div></div></div></div>",
        styles: [".info-box{width:100%;height:200px;padding:12px 20px;box-sizing:border-box;border:2px solid #ccc;border-radius:4px;background-color:#f8f8f8;resize:none}.copy-error-message{font-size:20px;font-weight:700}.copy-error-message.success{color:#258900}.copy-error-message.unsuccess{color:#c63200} /*# sourceMappingURL=nbp-debug-info.component.css.map */ "]
    }),
    __metadata("design:paramtypes", [])
], NbpDebugInfoComponent);
export { NbpDebugInfoComponent };
;
