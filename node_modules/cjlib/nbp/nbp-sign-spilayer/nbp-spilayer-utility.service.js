var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
// TODO cercare di no usare <any> 
// interface AvailableActiveXControls {
//   splayer: any, //ctiveXObject o meglio SplayerType
//   tube: any
// }
// interface Window {
//   [keyof AvailableActiveXControls]:any
// }
var NbpSpilayerUtilityService = (function () {
    function NbpSpilayerUtilityService() {
        this.linkActiveXReference();
    }
    Object.defineProperty(NbpSpilayerUtilityService.prototype, "activeXId", {
        get: function () {
            return this._activeXId;
        },
        set: function (id) {
            this._activeXId = id;
        },
        enumerable: true,
        configurable: true
    });
    NbpSpilayerUtilityService.prototype.linkActiveXReference = function () {
        console.log('Linking ActiveX Reference for id ' + this._activeXId);
        if (this._activeXId) {
            this._activeX = window[this._activeXId];
        }
        console.log('Linking ActiveX Reference found ' + this._activeX);
        if (this._activeX) {
            console.log('Linking ActiveX Reference method ' + this._activeX.IsISPADContrattiEnabled);
        }
    };
    NbpSpilayerUtilityService.prototype.isActiveXInstantiated = function () {
        var activeXinstantiated = !!this._activeX;
        if (activeXinstantiated && !this._activeX.IsISPADContrattiEnabled) {
            console.warn("ActiveX present but method not recognized");
            activeXinstantiated = false;
        }
        return activeXinstantiated;
    };
    NbpSpilayerUtilityService.prototype.isISPADContrattiEnabled = function () {
        var operationResut = false;
        if (this.isActiveXInstantiated()) {
            operationResut = this._activeX.IsISPADContrattiEnabled();
            console.log('ISPAD Contratti attivo: ' + operationResut);
        }
        return operationResut;
    };
    NbpSpilayerUtilityService.prototype.printContract = function (xml) {
        if (this.isActiveXInstantiated()) {
            return this._activeX.PrintContract(xml);
        }
        return false;
    };
    NbpSpilayerUtilityService.prototype.setLeanBankingEndPoint = function (endPoint, port) {
        if (this.isActiveXInstantiated()) {
            this._activeX.SetLeanBankingEndPoint(endPoint, port);
        }
        else {
            console.log("Impossibile modificare LeanBankingEndPoint");
        }
    };
    NbpSpilayerUtilityService.prototype.printDatiXml = function (xml, sincrono, descrizione) {
        if (this.isActiveXInstantiated()) {
            return this._activeX.PrintDatiXml(xml, sincrono, descrizione);
        }
        return false;
    };
    NbpSpilayerUtilityService.prototype.openBrowser = function (xml) {
        if (this.isActiveXInstantiated()) {
            return this._activeX.OpenBrowser(xml);
        }
        return false;
    };
    NbpSpilayerUtilityService.prototype.isPadPresent = function () {
        if (this.isActiveXInstantiated()) {
            return this._activeX.IsPadPresent();
        }
        return false;
    };
    NbpSpilayerUtilityService.prototype.isTabletPresent = function () {
        if (this.isActiveXInstantiated()) {
            return this._activeX.IsTabletPresent();
        }
        return false;
    };
    NbpSpilayerUtilityService.prototype.closeBrowser = function (caption, message, type) {
        if (this.isActiveXInstantiated()) {
            this._activeX.CloseBrowser(caption, message, type);
        }
    };
    NbpSpilayerUtilityService.prototype.showISPADContratti = function () {
        if (this.isActiveXInstantiated()) {
            this._activeX.ShowISPADContratti();
        }
    };
    return NbpSpilayerUtilityService;
}());
NbpSpilayerUtilityService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], NbpSpilayerUtilityService);
export { NbpSpilayerUtilityService };
