import { OnInit, EventEmitter, AfterViewInit } from '@angular/core';
import { ICustomerInfo } from './../nbp-commons/nbp-commons.interface';
import { ISignatureData } from './../../cj/cj-signature/cj-signature.interfaces';
import { NbpSignService } from './nbp-sign.service';
import { Observable } from 'rxjs/Observable';
export declare class NbpSignComponent implements OnInit, AfterViewInit {
    private signService;
    /**
     * Struttura dati contenente le info relative alla firma
     * - Descrizione: enum SignDescription
     *   - ALTRO = 0,
     *   - ALTRO_REMOTA,
     *   - CARTACEA,
     *   - DIGITALE_REMOTA,
     *   - GRAFOMETRICA
     *
     * - Tipo di firma: enum SignType
     *   - CARTA - Firma Cartacea
     *   - FEA   - Firma Elettronica Avanzata
     *   - FDR   - Firma Digitale Remota
     */
    nbpSignType: ISignatureData;
    /**
     * Dati del cliente impegnato nella firma dei documenti
     */
    nbpCustomerInfo: ICustomerInfo;
    /**
     * Documenti da firmare in formato XML
     * Inviati all'ActiveX SPILayerMulticanale
     */
    nbpXmlToSign: string;
    private _secondActivation;
    /**
     * Comunica al componente che è la seconda attivazione del processo di firma
     * per l'XMLToSign.
     * NOTA: così non sarà chiamato il metodo PrintContract dello SPILayerMulticanale
     */
    nbpSecondActivation: boolean;
    /**
     * Evento emesso dopo l'invocazione della procedura di firma sullo
     * SPILayerMulticanale
     * @param {EventEmitter<any>} nbpOnSignStarted
     */
    nbpOnSignStarted: EventEmitter<boolean>;
    /**
     * Evento emesso al click del pulsante per il riavvio del Tablet
     * @param {EventEmitter<any>} nbpOnRiavviaTablet
     */
    nbpOnRiavviaTablet: EventEmitter<any>;
    /**
     * Evento emesso in caso di click del pulsante di ErrorAdvice
     * @param {EventEmitter<any>} nbpOnErrorAdvise
     */
    nbpOnErrorAdvise: EventEmitter<any>;
    /**
     * Evento emesso in caso di firma cartacea e click del pulsante 'Firma Completata'
     * @param {EventEmitter<any>} nbpOnPaperSignCompleted
     */
    nbpOnPaperSignConfirmed: EventEmitter<any>;
    _signResultStream: Observable<boolean>;
    _signResult: boolean;
    _isPaperless: boolean;
    _errorAdvice: string;
    _actionLabel: string;
    constructor(signService: NbpSignService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    /**
     * Invoca il corretto metodo di firma sull'ActiveX SPILayerMulticanale
     */
    private _startSignProcess();
    /**
     * Controlla se la firma è paperless o cartacea
     */
    private _checkPaperPaperlessProcess();
    _onRiavviaTablet(): void;
    _onSignatureConfirm(): void;
    _onErrorAdvise(): void;
}
