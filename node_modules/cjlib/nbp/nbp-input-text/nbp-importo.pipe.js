var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Pipe } from '@angular/core';
var NbpImportoPipe = (function () {
    function NbpImportoPipe() {
    }
    NbpImportoPipe.prototype.transform = function (value, args) {
        var parsedValue = value;
        var decimalPrecision = parseInt(args || 2, 10);
        if (typeof value == 'string') {
            value = value.replace(',', '.');
            parsedValue = parseFloat(value).toFixed(decimalPrecision);
        }
        if (typeof value == 'number') {
            parsedValue = value.toFixed(decimalPrecision);
        }
        if (!isNaN(parsedValue) && !!parsedValue) {
            var valueStr = parsedValue.toString();
            var valueStrDec = valueStr.slice(-decimalPrecision);
            var valueFormat = [];
            valueStr = valueStr.substring(0, valueStr.length - (decimalPrecision + 1));
            while (valueStr.length > 3) {
                valueFormat.unshift(valueStr.slice(-3));
                valueStr = valueStr.substring(0, valueStr.length - 3);
            }
            valueFormat.unshift(valueStr);
            if (valueFormat[0] !== '-') {
                return valueFormat.join('.') + ',' + valueStrDec;
            }
        }
        else {
            return '';
        }
    };
    return NbpImportoPipe;
}());
NbpImportoPipe = __decorate([
    Pipe({
        name: 'nbpImporto'
    })
], NbpImportoPipe);
export { NbpImportoPipe };
