var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs/Subject';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
var NbpEmbeddingService = (function () {
    function NbpEmbeddingService() {
        // TODO: Meglio un BehaviorSubject?
        this._outgoingEvents$ = new Subject();
        this._incomingEvents$ = new Subject();
    }
    /**
     * Permette di recuperare lo stream degli OutgoingEmbeddingEvents
     */
    NbpEmbeddingService.prototype.getOutgoingEventStream = function () {
        return this._outgoingEvents$.asObservable();
    };
    /**
     * Permette di recuperare lo stream degli IncomingEmbeddingEvents
     */
    NbpEmbeddingService.prototype.getIncomingEventStream = function () {
        return this._incomingEvents$.asObservable();
    };
    /**
     * Permette di aggiungere un embeddingEvent nello stream Outgoing
     * @param event: IEmbeddingEvent
     */
    NbpEmbeddingService.prototype.notifyOutgoingEvent = function (event) {
        this._outgoingEvents$.next(event);
    };
    /**
     * Permette di aggiungere un embeddingEvent nello stream Incoming
     * @param event: IEmbeddingEvent
     */
    NbpEmbeddingService.prototype.notifyIncomingEvent = function (event) {
        this._incomingEvents$.next(event);
    };
    return NbpEmbeddingService;
}());
NbpEmbeddingService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], NbpEmbeddingService);
export { NbpEmbeddingService };
