var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs/BehaviorSubject';
import { NbpLoadingStatus } from './../nbp-commons/nbp-commons.enums';
import 'rxjs/add/operator/filter';
import 'rxjs/add/operator/windowWhen';
import 'rxjs/add/operator/map';
import 'rxjs/add/observable/timer';
var defaultId = 'nbp-loading-1';
var NbpLoadingService = (function () {
    /**
     * ReplaySubject -> manda a ogni subscriber anche se si registra dopo tutta la storia dello stream dall'inizio
     *
     * BehaviorSubject -> manda a ogni subscriver solo l'item più recente presente nello stream
     */
    function NbpLoadingService() {
        this._loadingSpinnerRequestStream = new BehaviorSubject({ id: null, status: NbpLoadingStatus.STOP });
        this.statusArray = new Array();
    }
    NbpLoadingService.prototype.handleMultipleActivationStatus = function (key) {
        var _this = this;
        return function (value) {
            // console.log(key);
            if (value.id === key) {
                if (value.status === NbpLoadingStatus.START) {
                    _this.statusArray.push(value.id);
                    var statusForId = _this.statusArray.filter(function (elem) { return elem === value.id; });
                    if (statusForId.length === 1) {
                        return true;
                    }
                }
                else {
                    var statusIndex = _this.statusArray.indexOf(value.id);
                    if (statusIndex !== -1) {
                        _this.statusArray.splice(statusIndex, 1);
                    }
                    statusIndex = _this.statusArray.indexOf(value.id);
                    if (statusIndex === -1) {
                        return true;
                    }
                }
            }
            return false;
        };
    };
    /**
     * Permette di inviare le richieste di attivazione spegnimento del componente loadingSpinner
     */
    NbpLoadingService.prototype.notifyLoadingSpinnerRequest = function (showLoadingSpinner, id) {
        var key = defaultId;
        if (id) {
            key = id;
        }
        var loadingStatus = {
            id: key,
            status: showLoadingSpinner ? NbpLoadingStatus.START : NbpLoadingStatus.STOP
        };
        this._loadingSpinnerRequestStream.next(loadingStatus);
    };
    /**
     * Recupera lo stato aggregato (per id e multiple nexted activation) della visibilità del componente loadingSpinner
     */
    NbpLoadingService.prototype.getLoadingSpinnerStatusStream = function (id) {
        var key = defaultId;
        if (id) {
            key = id;
        }
        this._loadingSpinnerAggregatedRequestStream = this._loadingSpinnerRequestStream.asObservable().filter(this.handleMultipleActivationStatus(key));
        return this._loadingSpinnerAggregatedRequestStream;
        // requestToHandle.subscribe((request: INbpLoadingStatus) => {
        //   if (request.status) {
        //     this.pendingTaskService.startTask();
        //   } else {
        //     this.pendingTaskService.endTask();
        //   }
        // })
        // return this.pendingTaskService.getPendingStatusStream();
    };
    return NbpLoadingService;
}());
NbpLoadingService = __decorate([
    Injectable(),
    __metadata("design:paramtypes", [])
], NbpLoadingService);
export { NbpLoadingService };
