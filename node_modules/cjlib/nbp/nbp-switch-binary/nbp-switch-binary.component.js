var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { coerceBooleanProperty } from './../../utility/lib-utility';
var NbpSwitchBinaryComponent = (function () {
    function NbpSwitchBinaryComponent() {
        /**
         * Evento emesso al click del componente.
         * Emette i seguenti valori:
         * ON - OFF
         */
        this.nbpOnClick = new EventEmitter();
        this._onToggle = function () {
            if (!this.nbpDisabled) {
                this.nbpActive = !this.nbpActive;
                this._emitOnClickEvent();
            }
        };
        this._emitOnClickEvent = function () {
            var output = this.nbpActive ? 'ON' : 'OFF';
            this.nbpOnClick.emit(output);
        };
    }
    Object.defineProperty(NbpSwitchBinaryComponent.prototype, "disabled", {
        /**
         *Booleano che abilita/disabilita il componente
         */
        get: function () { return this.nbpDisabled; },
        set: function (value) { this.nbpDisabled = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NbpSwitchBinaryComponent.prototype, "nbpActive", {
        /**
         * Booleano che permette di selezionare ON/OFF del componente
         * se nbpActive presente o uguale a TRUE --> binary-switch = ON
         * binary-switch = OFF altrimentin
         */
        get: function () { return this._nbpActive; },
        set: function (value) { this._nbpActive = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    NbpSwitchBinaryComponent.prototype.ngOnInit = function () {
        // controlliamo se l'array nbpLabels Ã¨ di due elementi
        if (!this.nbpLabels) {
            // console.log('Componente nbpSwitchBinary utilizzato con lables di default: On/Off');
            this.nbpLabels = ['On', 'Off'];
        }
        else if (this.nbpLabels.length > 2) {
            this.nbpLabels.splice(2);
            console.log('Componente nbpSwitchBinary utilizzato con lables custom: ' + this.nbpLabels.join('/'));
        }
    };
    return NbpSwitchBinaryComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Array)
], NbpSwitchBinaryComponent.prototype, "nbpLabels", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], NbpSwitchBinaryComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], NbpSwitchBinaryComponent.prototype, "nbpActive", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpSwitchBinaryComponent.prototype, "nbpOnClick", void 0);
NbpSwitchBinaryComponent = __decorate([
    Component({
        selector: 'nbp-switch-binary',template: "<div class=\"switch-container btn-group\" [ngClass]=\"{'switch-binary-disabled': disabled}\"><label id=\"switchBinaryLabel\" class=\"switch-binary\" [ngClass]=\"{'switch-binary-true': nbpActive}\" (click)=\"_onToggle()\"><div id=\"switchBinarySliderBox\" class=\"slider-box\"></div><span class=\"switch-label-icon-on\">{{nbpLabels[0]}}</span> <span class=\"switch-label-icon-off\">{{nbpLabels[1]}}</span></label></div>",
        styles: [".switch-binary-disabled #switchBinaryLabel{cursor:not-allowed;pointer-events:none!important;opacity:.5}.switch-binary-disabled #switchBinarySliderBox{cursor:not-allowed;pointer-events:none!important}.switch-binary{position:relative;display:inline-block;width:100px;height:50px;cursor:pointer;background-color:#ccc;-webkit-transition:0s;transition:0s}.switch-binary .switch-label-icon-on{font-weight:700;text-align:center;font-size:.75em;color:#fff;width:50px;display:table-cell;line-height:50px;box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.switch-binary .switch-label-icon-off{font-weight:700;text-align:center;font-size:.75em;color:#6f6f6f;width:50px;display:table-cell;line-height:50px;box-shadow:inset .25em .25em .25em 0 rgba(0,0,0,.2)}.slider-box{position:absolute;content:\"\";cursor:pointer;height:50px;width:50px;left:0;bottom:0;background-color:#fff;-webkit-transition:0s;transition:0s;border:1px solid #ccc}.switch-binary-true{background-color:#258900}.switch-binary-true-disabled{background-color:#5ca740}.switch-binary-true .slider-box{-webkit-transform:translateX(50px);-ms-transform:translateX(50px);transform:translateX(50px)}:host-context(.contrasto-on) .slider-box{background-color:#fff;border-color:#000}:host-context(.contrasto-on) .switch-binary .switch-label-icon-on{color:#fff}:host-context(.contrasto-on) .switch-binary .switch-label-icon-off{color:#fff}:host-context(.contrasto-on) .switch-binary-true{background-color:#000} /*# sourceMappingURL=nbp-switch-binary.component.css.map */ "]
    }),
    __metadata("design:paramtypes", [])
], NbpSwitchBinaryComponent);
export { NbpSwitchBinaryComponent };
