var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Input, TemplateRef, forwardRef, EventEmitter, Output, ElementRef } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgbCalendar } from './ngb-calendar';
import { NgbDate } from './ngb-date';
import { NgbDatepickerService } from './datepicker-service';
import { NgbDatepickerKeyMapService } from './datepicker-keymap-service';
import { NavigationEvent } from './datepicker-view-model';
import { toInteger } from '../util/util';
import { NgbDatepickerConfig } from './datepicker-config';
import { NgbDatepickerI18n } from './datepicker-i18n';
import { isChangedDate } from './datepicker-tools';
import { EnabledRangeService } from './../../nbp-enabled-range.service';
var NGB_CALENDAR_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return RplCalendar; }),
    multi: true
};
/**
 * A lightweight and highly configurable datepicker directive
 */
var RplCalendar = (function () {
    // startDateEnabled: string;
    // endDateEnabled: string;
    function RplCalendar(enabledRange, _keyMapService, _service, _calendar, i18n, config, _cd, _elementRef) {
        var _this = this;
        this.enabledRange = enabledRange;
        this._keyMapService = _keyMapService;
        this._service = _service;
        this._calendar = _calendar;
        this.i18n = i18n;
        this._cd = _cd;
        this._elementRef = _elementRef;
        // /**
        //  * Start date Enabled
        //  */
        // @Input() startDateEnabled: { year: number, month: number, day: number };
        // /**
        //  * End date Enabled 
        //  */
        // @Input() endDateEnabled: { year: number, month: number, day: number };
        /**
        * In questa variabile sono memorizzati i dati iniziali che scenderanno l'albero dei template
        */
        this.dataTemplate = { template: 0, day: 0, month: 0, year: 0, valid: false };
        /**
         * An event fired when navigation happens and currently displayed month changes.
         * See NgbDatepickerNavigateEvent for the payload info.
         */
        this.navigate = new EventEmitter();
        /**
         * Template da Adoperare
         */
        this.template = 0;
        this.mesi = [
            [
                { name: "GEN", number: 1, disabled: false, selected: false, focused: false },
                { name: "FEB", number: 2, disabled: false, selected: false, focused: false },
                { name: "MAR", number: 3, disabled: false, selected: false, focused: false },
                { name: "APR", number: 4, disabled: false, selected: false, focused: false }
            ],
            [
                { name: "MAG", number: 5, disabled: false, selected: false, focused: false },
                { name: "GIU", number: 6, disabled: false, selected: false, focused: false },
                { name: "LUG", number: 7, disabled: false, selected: false, focused: false },
                { name: "AGO", number: 8, disabled: false, selected: false, focused: false }
            ],
            [
                { name: "SET", number: 9, disabled: false, selected: false, focused: false },
                { name: "OTT", number: 10, disabled: false, selected: false, focused: false },
                { name: "NOV", number: 11, disabled: false, selected: false, focused: false },
                { name: "DIC", number: 12, disabled: false, selected: false, focused: false }
            ]
        ];
        this.years = [
            [
                { name: "2018", number: 2018, disabled: false, selected: false, focused: false },
                { name: "2019", number: 2019, disabled: false, selected: false, focused: false },
                { name: "2020", number: 2020, disabled: false, selected: false, focused: false },
                { name: "2021", number: 2021, disabled: false, selected: false, focused: false }
            ],
            [
                { name: "2022", number: 2022, disabled: false, selected: false, focused: false },
                { name: "2023", number: 2023, disabled: false, selected: false, focused: false },
                { name: "2024", number: 2024, disabled: false, selected: false, focused: false },
                { name: "2025", number: 2025, disabled: false, selected: false, focused: false }
            ],
            [
                { name: "2026", number: 2026, disabled: false, selected: false, focused: false },
                { name: "2027", number: 2027, disabled: false, selected: false, focused: false },
                { name: "2028", number: 2028, disabled: false, selected: false, focused: false },
                { name: "2029", number: 2029, disabled: false, selected: false, focused: false }
            ]
        ];
        this.onChange = function (_) { };
        this.onTouched = function () { };
        this.dayTemplate = config.dayTemplate;
        this.displayMonths = config.displayMonths;
        this.firstDayOfWeek = config.firstDayOfWeek;
        this.markDisabled = config.markDisabled;
        this.minDate = config.minDate;
        this.maxDate = config.maxDate;
        this.navigation = config.navigation;
        this.outsideDays = config.outsideDays;
        this.showWeekdays = config.showWeekdays;
        this.showWeekNumbers = config.showWeekNumbers;
        this.startDate = config.startDate;
        this.startDateEnabled = enabledRange.startDate;
        this.endDateEnabled = enabledRange.endDate;
        // alert("finale Start : " +  this.startDateEnabled)
        // alert("finale End   : " +  this.endDateEnabled)
        this._subscription = _service.model$.subscribe(function (model) {
            var newDate = model.firstDate;
            var oldDate = _this.model ? _this.model.firstDate : null;
            var newSelectedDate = model.selectedDate;
            var oldSelectedDate = _this.model ? _this.model.selectedDate : null;
            _this.model = model;
            // handling selection change
            if (isChangedDate(newSelectedDate, oldSelectedDate)) {
                _this.onTouched();
                _this.onChange(newSelectedDate ? { year: newSelectedDate.year, month: newSelectedDate.month, day: newSelectedDate.day } :
                    null);
            }
            // emitting navigation event if the first month changes
            if (!newDate.equals(oldDate)) {
                _this.navigate.emit({
                    current: oldDate ? { year: oldDate.year, month: oldDate.month } : null,
                    next: { year: newDate.year, month: newDate.month }
                });
            }
            _cd.markForCheck();
        });
    }
    RplCalendar.prototype.abilitaMesi = function (data) {
        if (this.startDateEnabled.month <= data && data <= this.endDateEnabled.month && (this.startDateEnabled.year <= this.dataTemplate.year && this.dataTemplate.year <= this.endDateEnabled.year)) {
            return true;
        }
        return false;
    };
    RplCalendar.prototype.abilitaAnni = function (data) {
        if (this.startDateEnabled.year <= data && data <= this.endDateEnabled.year) {
            return true;
        }
        return false;
    };
    RplCalendar.prototype.setNewTemplate = function (selectedTemplate) {
        this.setMesi(this.dataTemplate.month, true);
        this.updateYears(this.dataTemplate.year);
        this.setYear(this.dataTemplate.year, true);
        this.template = selectedTemplate;
    };
    RplCalendar.prototype.setMesi = function (position, selected) {
        if (!this.abilitaMesi(position))
            return;
        var nRow = 0, nCol = 0;
        if (position == 4)
            nRow = 0;
        else if (position == 8)
            nRow = 1;
        else if (position == 12)
            nRow = 2;
        else
            nRow = Math.trunc(position / 4);
        nCol = position - (nRow * 4) - 1;
        this.mesi[nRow][nCol].selected = selected;
    };
    RplCalendar.prototype.updateYears = function (startYearValue) {
        for (var j = 0; j < 3; j++) {
            for (var i = 0; i < 4; i++) {
                this.years[j][i].number = startYearValue + i + j * 4;
                this.years[j][i].name = this.years[j][i].number + "";
            }
        }
    };
    RplCalendar.prototype.setYear = function (yearValue, selected) {
        if (!this.abilitaAnni(yearValue))
            return;
        this.years.forEach(function (row) {
            row.forEach(function (year) {
                if (year.number == yearValue)
                    year.selected = selected;
            });
        });
    };
    /**
     * Manually focus the calendar
     */
    RplCalendar.prototype.focus = function () { this._elementRef.nativeElement.focus(); };
    RplCalendar.prototype.getHeaderHeight = function () {
        var h = this.showWeekdays ? 6.25 : 4.25;
        return this.displayMonths === 1 || this.navigation !== 'select' ? h - 2 : h;
    };
    RplCalendar.prototype.getHeaderMargin = function () {
        var m = this.showWeekdays ? 2 : 0;
        return this.displayMonths !== 1 || this.navigation !== 'select' ? m + 2 : m;
    };
    /**
     * Navigates current view to provided date.
     * With default calendar we use ISO 8601: 'month' is 1=Jan ... 12=Dec.
     * If nothing or invalid date provided calendar will open current month.
     * Use 'startDate' input as an alternative
     */
    RplCalendar.prototype.navigateTo = function (date) {
        this._service.open(date ? new NgbDate(date.year, date.month, 1) : this._calendar.getToday());
    };
    RplCalendar.prototype.ngOnDestroy = function () { this._subscription.unsubscribe(); };
    RplCalendar.prototype.ngOnInit = function () {
        if (this.model === undefined) {
            this._service.displayMonths = toInteger(this.displayMonths);
            this._service.markDisabled = this.markDisabled;
            this._service.firstDayOfWeek = this.firstDayOfWeek;
            this._setDates();
            // inixializzazione dataTemplate alla data selezionata
            if (!this.startDate) {
                this.startDate = { year: null, month: null, day: null };
                var today = new Date();
                var dd = today.getDate();
                var mm = today.getMonth() + 1; //January is 0!
                var yyyy = today.getFullYear();
                this.startDate.day = dd;
                this.startDate.month = mm;
                this.startDate.year = yyyy;
            }
            this.dataTemplate.day = this.startDate.day;
            this.dataTemplate.month = this.startDate.month;
            this.dataTemplate.year = this.startDate.year;
            this.dataTemplate.valid = false;
        }
    };
    RplCalendar.prototype.ngOnChanges = function (changes) {
        if (changes['displayMonths']) {
            this._service.displayMonths = toInteger(this.displayMonths);
        }
        if (changes['markDisabled']) {
            this._service.markDisabled = this.markDisabled;
        }
        if (changes['firstDayOfWeek']) {
            this._service.firstDayOfWeek = this.firstDayOfWeek;
        }
        this._setDates();
    };
    RplCalendar.prototype.onDateSelect = function (date) {
        this._service.focus(date);
        this.writeValue(date);
    };
    RplCalendar.prototype.onKeyDown = function (event) { this._keyMapService.processKey(event); };
    RplCalendar.prototype.onNavigateDateSelect = function (date) {
        this._service.open(date);
    };
    RplCalendar.prototype.onNavigateEvent = function (event) {
        var bufferData;
        this.model.firstDate.month = this.dataTemplate.month;
        this.model.firstDate.year = this.dataTemplate.year;
        if (event == NavigationEvent.PREV && this.template == 0) {
            bufferData = this._calendar.getPrev(this.model.firstDate, 'm', 1);
            this._service.open(bufferData);
            this.updateDataTemplate(bufferData);
        }
        else if (NavigationEvent.NEXT && this.template == 0) {
            bufferData = this._calendar.getNext(this.model.firstDate, 'm', 1);
            this._service.open(bufferData);
            this.updateDataTemplate(bufferData);
        }
        else if (event == NavigationEvent.PREV && this.template == 1) {
            bufferData = this._calendar.getPrev(this.model.firstDate, 'm', 12);
            this._service.open(bufferData);
            this.updateDataTemplate(bufferData);
        }
        else if (event == NavigationEvent.NEXT && this.template == 1) {
            bufferData = this._calendar.getNext(this.model.firstDate, 'm', 12);
            this._service.open(bufferData);
            this.updateDataTemplate(bufferData);
        }
        else if (event == NavigationEvent.PREV && this.template == 2) {
            bufferData = this._calendar.getPrev(this.model.firstDate, 'm', 120);
            this._service.open(bufferData);
            this.updateDataTemplate(bufferData);
            this.updateYears(this.dataTemplate.year);
        }
        else if (event == NavigationEvent.NEXT && this.template == 2) {
            bufferData = this._calendar.getNext(this.model.firstDate, 'm', 120);
            this._service.open(bufferData);
            this.updateDataTemplate(bufferData);
            this.updateYears(this.dataTemplate.year);
        }
    };
    RplCalendar.prototype.onChangeTemplate = function (dataTemplate) {
        this.template = dataTemplate.template;
    };
    RplCalendar.prototype.updateDataTemplate = function (date) {
        this.dataTemplate.day = date.day;
        this.dataTemplate.month = date.month;
        this.dataTemplate.year = date.year;
    };
    RplCalendar.prototype.registerOnChange = function (fn) { this.onChange = fn; };
    RplCalendar.prototype.registerOnTouched = function (fn) { this.onTouched = fn; };
    RplCalendar.prototype.setDisabledState = function (isDisabled) { this._service.disabled = isDisabled; };
    RplCalendar.prototype.showFocus = function (focusVisible) { this._service.focusVisible = focusVisible; };
    RplCalendar.prototype.writeValue = function (value) { this._service.select(value); };
    RplCalendar.prototype._setDates = function () {
        var startDate = this._service.toValidDate(this.startDate, this._calendar.getToday());
        var minDate = this._service.toValidDate(this.minDate, this._calendar.getPrev(startDate, 'y', 10));
        var maxDate = this._service.toValidDate(this.maxDate, this._calendar.getPrev(this._calendar.getNext(startDate, 'y', 11)));
        this.minDate = { year: minDate.year, month: minDate.month, day: minDate.day };
        this.maxDate = { year: maxDate.year, month: maxDate.month, day: maxDate.day };
        this._service.minDate = minDate;
        this._service.maxDate = maxDate;
        this.navigateTo(startDate);
    };
    return RplCalendar;
}());
__decorate([
    Input(),
    __metadata("design:type", TemplateRef)
], RplCalendar.prototype, "dayTemplate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], RplCalendar.prototype, "displayMonths", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], RplCalendar.prototype, "firstDayOfWeek", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], RplCalendar.prototype, "markDisabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplCalendar.prototype, "maxDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplCalendar.prototype, "minDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], RplCalendar.prototype, "navigation", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], RplCalendar.prototype, "outsideDays", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], RplCalendar.prototype, "showWeekdays", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], RplCalendar.prototype, "showWeekNumbers", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplCalendar.prototype, "startDate", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplCalendar.prototype, "startDateEnabled", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], RplCalendar.prototype, "endDateEnabled", void 0);
__decorate([
    Output(),
    __metadata("design:type", Object)
], RplCalendar.prototype, "navigate", void 0);
RplCalendar = __decorate([
    Component({
        exportAs: 'rplCalendar',
        selector: 'rpl-calendar',
        changeDetection: ChangeDetectionStrategy.OnPush,
        host: {
            'class': 'd-inline-block rounded',
            'tabindex': '0',
            '[attr.tabindex]': 'model.disabled ? undefined : "0"',
            '(blur)': 'showFocus(false)',
            '(focus)': 'showFocus(true)',
            '(keydown)': 'onKeyDown($event)'
        },
        template: "<div class=\"ngb-dp-header bg-faded pt-1 rounded-top\" [style.height.rem]=\"getHeaderHeight()\" [style.marginBottom.rem]=\"-getHeaderMargin()\"><ngb-datepicker-navigation *ngIf=\"navigation !== 'none'\" [date]=\"model.firstDate\" [minDate]=\"model.minDate\" [maxDate]=\"model.maxDate\" [months]=\"model.months.length\" [template]=\"template\" [disabled]=\"model.disabled\" [showWeekNumbers]=\"showWeekNumbers\" [showSelect]=\"navigation === 'select'\" (navigate)=\"onNavigateEvent($event)\" (select)=\"onNavigateDateSelect($event)\" (newTemplate)=\"setNewTemplate($event)\"></ngb-datepicker-navigation></div><div class=\"ngb-dp-months d-flex px-1 pb-1\"><ng-template ngFor let-month [ngForOf]=\"model.months\" let-i=\"index\"><div class=\"ngb-dp-month d-block ml-3\"><div *ngIf=\"navigation !== 'select' || displayMonths > 1\" style=\"min-width:150px\" class=\"ngb-dp-month-name text-center\"><div [ngSwitch]=\"template\"><div *ngSwitchCase=\"0\">{{ i18n.getMonthFullName(dataTemplate.month) }} {{ dataTemplate.year }}</div><div *ngSwitchCase=\"1\">{{ dataTemplate.year }}</div><div *ngSwitchCase=\"2\">{{ dataTemplate.year }} - {{ dataTemplate.year + 11 }}</div></div></div><ngb-datepicker-routing-view [mesi]=\"mesi\" [years]=\"years\" [dataTemplate]=\"dataTemplate\" [date]=\"model.firstDate\" [currentTemplate]=\"template\" [month]=\"month\" [showWeekdays]=\"showWeekdays\" [showWeekNumbers]=\"showWeekNumbers\" [startDateEnabled]=\"startDateEnabled\" [endDateEnabled]=\"endDateEnabled\" [outsideDays]=\"(displayMonths === 1 ? outsideDays : 'hidden')\" (select)=\"onDateSelect($event)\" (changeTemplate)=\"onChangeTemplate($event)\"></ngb-datepicker-routing-view></div></ng-template></div>",
        styles: [":host{border:1px solid rgba(0,0,0,.125)}.ngb-dp-header{border-bottom:1px solid rgba(0,0,0,.125)}.ngb-dp-month{pointer-events:none}ngb-datepicker-routing-view{pointer-events:auto}.ngb-dp-month:first-child{margin-left:0!important}.ngb-dp-month-name{font-size:larger;font:Arial regular;height:2rem;line-height:2rem} /*# sourceMappingURL=datepicker.css.map */ "],
        providers: [NGB_CALENDAR_VALUE_ACCESSOR, NgbDatepickerService, NgbDatepickerKeyMapService]
    }),
    __metadata("design:paramtypes", [EnabledRangeService,
        NgbDatepickerKeyMapService,
        NgbDatepickerService,
        NgbCalendar,
        NgbDatepickerI18n, NgbDatepickerConfig,
        ChangeDetectorRef,
        ElementRef])
], RplCalendar);
export { RplCalendar };
