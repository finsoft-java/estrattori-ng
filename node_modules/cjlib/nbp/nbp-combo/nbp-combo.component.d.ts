import { Injector, EventEmitter, OnInit, ElementRef, OnChanges, SimpleChanges, ChangeDetectorRef } from '@angular/core';
import { NgModel, NgControl } from '@angular/forms';
import { AsyncValidatorArray, ValidatorArray } from './../nbp-commons/nbp-validator';
import { NbpPipe } from './../nbp-commons/nbp-commons.enums';
import { NbpFormatterService } from './../../utility/nbp-formatter.service';
import { INbpDataSource } from './../nbp-datasource/nbp-datasource.interfaces';
import { NbpFormContainerComponent } from './../nbp-form-container/nbp-form-container.component';
import { NbpInputElementBase } from './../nbp-commons/nbp-input-element-base';
import { INbpInput } from './../nbp-commons/nbp-commons.interface';
import { Observable } from 'rxjs/Observable';
/**
 * Provider Expression that allows nbp-combo to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
export declare const NBP_COMBO_CONTROL_VALUE_ACCESSOR: any;
export declare const NBP_INPUT_ELEMENT_BASE: any;
/**
 * Componente per la implementazione della combobox, supporta tutti gli attributi standard html per il tag input.
 * Personalizzabile per la gestione di currency grazie all'applicaizone di opportuni pipes
 * definiti dalla libreria.
 */
export declare class NbpComboComponent<T> extends NbpInputElementBase<T> implements OnInit, OnChanges, INbpInput {
    private validatori;
    private asyncValidatori;
    private parentFormContainer;
    protected formatterService: NbpFormatterService;
    private element;
    private inj;
    protected cd: ChangeDetectorRef;
    _multi: boolean;
    /**
     * nome della combobox
     */
    name: string;
    /**
     * Boleano che mantiene lo stato del focus
     */
    _focusActive: boolean;
    /**
     * Identificativo univoco per il text field.
     * Se nessun id è fornito e' auto-generato.
     */
    id: string;
    _nbpShowValidation: boolean;
    /**
     * (Opzionale)
     * Booleano che consente di visualizzare i messaggi di feedback relativi alla validazione.
     * Valore di default false
     */
    nbpShowValidation: boolean;
    /**
     * (Opzionale) Messaggio di errore da visualizzare in caso di campo non valido
     * Valore di Default: "Cmpo obbligatorio o invalido"
     */
    nbpErrorMessage: string;
    showErrorLabel: boolean;
    private _nbpDisabled;
    /**
     * Flag che abilita/disabilita le funzionalità associate alla combobox
     */
    disabled: boolean;
    private _nbpRequired;
    /**
     * Flag che imposta come obbligatorio o meno il campo di input (disabilitato) associato alla combobox
     */
    required: boolean;
    /**
     * Il testo del placeholder.
     */
    placeholder: string;
    private _nbpShowEmptyValue;
    /**
     * Flag che imposta come obbligatorio o meno il campo di input (disabilitato) associato alla combobox
     */
    nbpShowEmptyValue: boolean;
    /**
     * Datasource degli oggetti di tipo T che andranno a popolare la combobox.
     */
    nbpDataSource: INbpDataSource<T>;
    /**
     * Rappresenta il nome del campo presente all’interno di ogni oggetto o l’oggetto stesso
     * che andrà a popolare la combobox e che verrà visualizzato all’interno della lista
     */
    nbpViewField: string;
    /**
     * Rappresenta il nome del campo presente all’interno di ogni oggetto o l’oggetto stesso
     * da usare come chiave nella selezione del valore della combobox */
    nbpKeyField: string;
    private _nbpHighlightedDefault;
    /**
     * (opzionale ) Booleano che gestisce l’attributo  bordo giallo della combobox.
     * Al primo click/focus tornerà alla versione di default.
     * valore default false
     */
    nbpHighlightedDefault: boolean;
    /**
     * (Opzionale) Attributo di tipo NbpPipe(Enum) rappresentante i filtri messi a disposizione dalla
     * libreria per i campi di input, se presente, l’attributo abilita l’utilizzo del filtro indicato
     * "IMPORTO" | "DECIMAL" | "DATE" | "LOWERCASE" | "PERCENT" | "UPPERCASE"
     */
    nbpFilter: NbpPipe;
    /**
     * (Opzionale) argomenti da utilizzare per il filtro
     *
     */
    nbpFilterArg: any;
    protected _nbpBindingToKeyField: boolean;
    /**
     * Definisce quando il binding del ngModel deve essere fatto sull'attributo nbpKeyField
     *
     */
    nbpBindingToKeyField: boolean;
    /**
     * Evento emesso quando è selezionato un elemento della combobox.
     */
    select: EventEmitter<T>;
    /**
     * Evento emesso quando la dropdown viene chiuda
     */
    dropdownClosed: EventEmitter<{}>;
    /**
     * Evento emesso quando la dropdown viene aperta
     */
    dropdownOpened: EventEmitter<{}>;
    /**
     * (Opzionale) Funzione custom di validazione del campo
     */
    nbpValidation: EventEmitter<any>;
    model: NgModel;
    /**
     * (Opzionale) Paramentro da valorizzare per abilitare l'autofocus sul rispettivo campo.
     */
    firstFocus: boolean;
    /**
     * (Opzionale) Paramentro che indica l'ordine di spostamento da un campo all'altro attraverso il tab.
     */
    tabindex: number;
    private elementRef;
    private visibleTextBox;
    invalid: Observable<boolean>;
    ngControl: NgControl;
    _nbpShadowData: Array<T>;
    _dropdownVisible: boolean;
    private _arrowClicked;
    private _activeItemIndex;
    protected _nbpViewValue: string;
    private datasourceSubscription;
    private _nbpPipe;
    protected _preSelectedElementIndex: number;
    initPolyfillScroll(): void;
    writeValue(value: T): void;
    _getDropdownState(): string;
    _manageDropdownState(event: any): void;
    _isOptionPreselected(item: any): boolean;
    _onSelectByKeyboard(event: Event): void;
    _showCheckbox(item: any): void;
    protected _isAlphaNumericCharacter(keyCode: number): boolean;
    _searchByKey(event: any): void;
    /**
     * Alla pressione di "delete" o "backspace", se la checkbox è vuota ne svuoto anche il value (in modo da triggerare anche la validation).
     * Svuoto anche il _preSelectedElementIndex.
     * @param event
     * @private
     */
    _checkEmpty(event: any): void;
    private _evaluateCurrentSelectionIndex();
    protected scrollToSelectedIndex(elementIndex: number): void;
    _moveNext(event: Event): void;
    _movePrev(event: Event): void;
    confirmSelection(): void;
    ngOnInit(): void;
    initVisibleTextBox(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private _prepareDataSource();
    constructor(validatori: ValidatorArray, asyncValidatori: AsyncValidatorArray, parentFormContainer: NbpFormContainerComponent, formatterService: NbpFormatterService, element: ElementRef, inj: Injector, cd: ChangeDetectorRef);
    _getViewValue(item: any): any;
    protected _getModelValue(item: any): any;
    private _getDropDownLabel(item);
    _onSelectEvent(item: any): void;
    _onPreSelectEvent(item: any): void;
    protected _getViewModelElement(item: any): any;
    protected _getSelectedElement(item: any): any;
    _isOptionSelected(item: any): boolean;
    private _onInputFocus(event);
    _onInputClick(event: Event): void;
    _onTouchedEvent(event: any): void;
    private _closeDropDown(target);
    _focusOutFn(event: any): void;
    onFocusout(target: HTMLElement): void;
    onClick(target: HTMLElement): void;
}
