var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { coerceBooleanProperty } from './../../utility/lib-utility';
import { NbpStyle } from './../nbp-commons/nbp-commons.enums';
var nextId = 0;
/**
 * @export
 * @class NbpDividingLineComponent
 * @implements {OnInit}
 * Visualizza una linea di separazione, con un pulsante opzionale e un titolo opzionale
 */
var NbpDividingLineComponent = (function () {
    function NbpDividingLineComponent() {
        /**
         * Identificativo univoco per il componente.
         * Se nessun id è fornito e' auto-generato.
         */
        this.id = "nbp-dividing-line-" + ++nextId;
        this._nbpShowButton = false;
        /**
         * (Opzionale) Indica quanto spazio deve occupare il braccio sinistro affinchè si accentri l'icona o la label in caso di presenza del pulsante laterale.
         */
        this.marginLeft = "99999";
        /**
         * (Opzionale) Stile della linea di separazione, di default è grigia.
         * Se impostata su NbpStyle.PRIMARY è di colore verde
         */
        this.nbpLineStyle = NbpStyle.DEFAULT;
        this._lineStyle = NbpStyle;
        /**
         * (Opzionale) Evento emesso al click sul pulsante.
         * @param {EventEmitter<any>} nbpClick
         */
        this.nbpClick = new EventEmitter();
        this.center = false;
    }
    Object.defineProperty(NbpDividingLineComponent.prototype, "nbpShowButton", {
        /**
         * (Opzionale) Booleano che mostra/nasconde il pulsante. Default: false
         */
        get: function () { return this._nbpShowButton; },
        set: function (value) { this._nbpShowButton = coerceBooleanProperty(value); },
        enumerable: true,
        configurable: true
    });
    NbpDividingLineComponent.prototype._onClick = function () {
        if (this.nbpClick) {
            this.nbpClick.emit();
        }
    };
    NbpDividingLineComponent.prototype.ngOnInit = function () {
        this.marginLeft = this.marginLeft.trim() + "";
        if (this.marginLeft == "99999")
            this.center = false;
        else
            this.center = true;
        // if(this.nbpLineStyle === undefined) {
        //   this.nbpLineStyle = NbpStyle.DEFAULT;
        // }
    };
    return NbpDividingLineComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpDividingLineComponent.prototype, "id", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpDividingLineComponent.prototype, "nbpTitle", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpDividingLineComponent.prototype, "nbpTitleIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Object])
], NbpDividingLineComponent.prototype, "nbpShowButton", null);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpDividingLineComponent.prototype, "nbpButtonLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpDividingLineComponent.prototype, "nbpButtonIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpDividingLineComponent.prototype, "nbpButtonIconHover", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpDividingLineComponent.prototype, "marginLeft", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpDividingLineComponent.prototype, "nbpLineStyle", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpDividingLineComponent.prototype, "nbpClick", void 0);
NbpDividingLineComponent = __decorate([
    Component({
        selector: 'nbp-dividing-line',template: "<div class=\"dividing-line-container\"><ng-container *ngIf=\"center; else falseTemplate\"><div [ngClass]=\"(nbpTitleIcon || nbpTitle) ? 'dividing-line-left' : 'dividing-line-left-continuous'\" [ngStyle]=\"{'max-width.%': marginLeft, 'min-width.%': marginLeft, 'width.%': marginLeft}\"><hr [ngClass]=\"{'line-green': nbpLineStyle === _lineStyle.PRIMARY, 'line-gray': nbpLineStyle === _lineStyle.DEFAULT}\"></div></ng-container><ng-template #falseTemplate><div [ngClass]=\"(nbpTitleIcon || nbpTitle) ? 'dividing-line-left' : 'dividing-line-left-continuous'\"><hr [ngClass]=\"{'line-green': nbpLineStyle === _lineStyle.PRIMARY, 'line-gray': nbpLineStyle === _lineStyle.DEFAULT}\"></div></ng-template><div class=\"dividing-line-center\"><span *ngIf=\"nbpTitleIcon\" class=\"dividing-line-title-icon\" [ngClass]=\"nbpTitleIcon\"></span> <span *ngIf=\"nbpTitle\" class=\"dividing-line-title\">{{nbpTitle}}</span></div><div [ngClass]=\"(nbpTitleIcon || nbpTitle) ? 'dividing-line-right' : 'dividing-line-right-continuous'\"><hr [ngClass]=\"{'line-green': nbpLineStyle === _lineStyle.PRIMARY, 'line-gray': nbpLineStyle === _lineStyle.DEFAULT}\"></div><div *ngIf=\"nbpShowButton\" class=\"dividing-line-button\"><i class=\"dividing-line-button-icon\" (click)=\"_onClick()\" [ngClass]=\"nbpButtonIcon\"></i> <i class=\"dividing-line-button-icon hover-icon\" (click)=\"_onClick()\" [ngClass]=\"nbpButtonIconHover\"></i> <span *ngIf=\"nbpButtonLabel\" class=\"dividing-line-button-label\">{{nbpButtonLabel}}</span></div></div>",
        styles: [".dividing-line-container{display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center;background-color:transparent}.dividing-line-left-continuous{flex-grow:1;align-self:flex-start;padding-left:20px}.dividing-line-left{flex-grow:1;align-self:flex-start;padding-left:20px;padding-right:20px}.dividing-line-right-continuous{flex-grow:1;align-self:flex-start;padding-right:20px}.dividing-line-right{flex-grow:1;align-self:flex-start;padding-right:20px;padding-left:20px}hr.line-green{border:.5px solid #258900}hr.line-gray{border:.5px solid #ccc}.dividing-line-content{align-self:center}.dividing-line-title-icon{font-size:2em;color:#6f6f6f;vertical-align:middle;margin-right:10px}.dividing-line-title{font-size:1.125em;color:#323232;vertical-align:middle}.dividing-line-button{align-self:center;padding-right:20px}.dividing-line-button .dividing-line-button-icon{vertical-align:middle;font-size:1.875em;cursor:pointer;color:#258900}.dividing-line-button .dividing-line-button-icon.hover-icon{display:none}.dividing-line-button .dividing-line-button-label{vertical-align:middle;color:#258900;font-size:.75em;font-weight:700;text-transform:uppercase}.dividing-line-button:hover .dividing-line-button-icon{display:none}.dividing-line-button:hover .hover-icon{display:inline!important}.show-button{height:40px}:host-context(.contrasto-on) .dividing-line-title-icon{color:#000}:host-context(.contrasto-on) .dividing-line-title{color:#000}:host-context(.contrasto-on) .dividing-line-button .dividing-line-button-icon{color:#000!important}:host-context(.contrasto-on) .dividing-line-button .dividing-line-button-label{color:#000!important}:host-context(.contrasto-on) hr.line-gray,:host-context(.contrasto-on) hr.line-green{border:.5px solid #000} /*# sourceMappingURL=nbp-dividing-line.component.css.map */ "]
    }),
    __metadata("design:paramtypes", [])
], NbpDividingLineComponent);
export { NbpDividingLineComponent };
