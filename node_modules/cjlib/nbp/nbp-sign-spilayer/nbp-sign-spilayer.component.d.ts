import { OnInit, OnDestroy, AfterViewInit } from '@angular/core';
import { NbpSpilayerService } from '../nbp-sign/nbp-spilayer.service';
export interface ISpilayer {
    /**
     * Metodo per verificare se lo spooler di firma è attivo.
     * @return {boolean} spooler di firma è attivo?
     */
    IsISPADContrattiEnabled(): boolean;
    /**
     * Metodo per scatenare una stampa dematerializzata o
     * cartacea di un contratto che prevede la dematerializzazione.
     * @param  {string}  xml XML di stampa secondo formalismo
     * @return {boolean}     esito dell’operazione:
     *   - True se SPILayerMulticanale ha ingaggiato correttamente:
     *      LeanBanking (SpiTube) in caso di stampa cartacea
     *      o lo Spooler in caso di stampa dematerializzata.
     *   - False altrimenti.
     */
    PrintContract(xml: string): boolean;
    /**
     * Metodo per modificare l’endpoint relativamente alla sola stampa LeanBanking
     * e la porta a cui contattare SpiTube.
     * Se non richiamato si utilizzeranno l’indirizzo e la porta di default prevista e concordata con SIT.
     * @param {string} endPoint indirizzo ip\nome macchina
     * @param {number} port
     */
    SetLeanBankingEndPoint(endPoint: string, port: number): void;
    /**
     * Metodo utilizzabile per scatenare la generazione del pacchetto di stampa.
     * @param  {string}  xml         xml usato per generare il pacchetto di stampa
     * @param  {boolean} sincrono    operatività del metodo
     * @param  {string}  descrizione è utilizzabile solo in contesti .net,
     *                               non è dunque usabile in contesti dove
     *                               l’activeX è usato da applicativi web
     * @return {boolean}             esito dell’operazione
     */
    PrintDatiXml(xml: string, sincrono: boolean, descrizione?: string): boolean;
    /**
     * Permette la visualizzazione dell’applicativo web della FDR nel PAD 10’.
     * @param  {string}  xml xml che indicherà l’url da richiamare e i parametri da inviare al sito dell’FDR
     * @return {boolean} Restituisce un booleano il cui stato indicherà l’apertura con successo o meno del browser  nel PAD 10’
     */
    OpenBrowser(xml: string): boolean;
    /**
     * Verifica se alla workstation è connesso e presente un PAD 5’.
     * @return {boolean} esito dell’operazione
     */
    IsPadPresent(): boolean;
    /**
     * Verifica se alla workstation è connesso e presente un Tablet 10’.
     * @return {boolean} esito dell’operazione
     */
    IsTabletPresent(): boolean;
    /**
     * Chiusura programmatica Browser Tablet 10’.
     * @param {string}             caption titolo del popup
     * @param {string}             message messaggio del popup
     * @param {info|warning|error} type    tipo di popup che può essere
     */
    CloseBrowser(caption?: string, message?: string, type?: 'info' | 'warning' | 'error'): void;
    /**
     * Permette di aprire (visualizzare se ridotto ad icona) lo Spooler.
     */
    ShowISPADContratti(): void;
}
export declare class LowLevelSpilayerEmulator implements ISpilayer {
    IsISPADContrattiEnabled(): boolean;
    PrintContract(xml: string): boolean;
    SetLeanBankingEndPoint(endPoint: string, port: number): void;
    PrintDatiXml(xml: string, sincrono: boolean, descrizione?: string): boolean;
    OpenBrowser(xml: string): boolean;
    IsPadPresent(): boolean;
    IsTabletPresent(): boolean;
    CloseBrowser(caption?: string, message?: string, type?: "info" | "warning" | "error"): void;
    ShowISPADContratti(): void;
}
export declare class NbpSignSpilayerComponent implements OnInit, OnDestroy, AfterViewInit {
    private spilayerService;
    /**
     * Identificativo del tag Object contenente lo SpiLayerMulticanale.
     * Da utilizzare per l'invocazione dei metodi di firma del ActiveX.
     */
    nbpObjectId: string;
    constructor(spilayerService: NbpSpilayerService);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
}
