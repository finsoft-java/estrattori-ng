import { Observable } from 'rxjs/Observable';
import { CjEmbeddingUtility } from './cj-embedding.utility';
import { IEmbeddingMessage } from './../cj-commons/cj-commons.interface';
import { NbpEmbeddingMessageType } from './../../nbp/nbp-commons/nbp-commons.enums';
import { IEmbeddingEvent } from './../../nbp/nbp-commons/nbp-commons.interface';
import { NbpEmbeddingService } from './../../nbp/nbp-embedding/nbp-embedding.service';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/catch';
import 'rxjs/add/operator/map';
export declare class CjIFrameEmbeddingService {
    private embeddingUtility;
    private embeddingService;
    private knownNdceEvents;
    private _outgoingMessages$;
    private _incomingMessages$;
    private _isEmbeddingEnabled;
    isEmbeddingEnabled: boolean;
    constructor(embeddingUtility: CjEmbeddingUtility, embeddingService: NbpEmbeddingService);
    private registerOnIncomingMessages();
    private registerOnOutgoingMessages();
    private registerOnOutgoingEvents();
    receiveMessage(event: MessageEvent): void;
    getOutgoingMessageStream(): Observable<IEmbeddingMessage>;
    /**
     * Permette di aggiungere un embbendingMessage
     * @param message: IEmbeddingMessage
     */
    private notifyOutgoingMessage(message);
    /**
     * Permette di ricevere embeddingMessage dall'esterno
     */
    notifyIncomingMessage(message: IEmbeddingMessage): void;
    /**
     * invia un qualunque messaggio IEmbeddingMessage
     */
    sendMessage(message: IEmbeddingMessage): void;
    /**
     * crea e invia il messagio di CJ_READY verso l'esterno
     */
    sendReadyMessage(): void;
    /**
     * crea e invia il messagio di MODAL_WINDOW verso l'esterno
     */
    sendModalWindowMessage(cmd: 'SHOW' | 'HIDE'): void;
    /**
     * crea e invia il messagio di LOADING_WINDOW verso l'esterno
     */
    sendLoadingWindowMessage(cmd: 'START' | 'STOP'): void;
    /**
     * crea e invia il messaggio di GOTO verso l'esterno
     */
    sendGotoMessage(cmd: string): void;
    private isEmbeddingMessage(message);
    transformEventToMessage(event: IEmbeddingEvent): IEmbeddingMessage;
    transformMessageToEvent(message: IEmbeddingMessage): {
        type: NbpEmbeddingMessageType;
    } | {
        type: NbpEmbeddingMessageType;
        body: any;
    };
}
