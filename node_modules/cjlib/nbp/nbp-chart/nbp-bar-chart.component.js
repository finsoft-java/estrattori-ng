var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { NbpChartService } from '../nbp-chart/nbp-chart.service';
var NbpBarChartComponent = (function () {
    function NbpBarChartComponent() {
        /** Testo dell' azione custom di selezione (es. Dettagli) */
        this.nbpSelectionLabel = '';
        /** default width */
        this.width = 300;
        /** default height */
        this.height = 100;
        /**
         * Evento emesso al click sul grafico
         * @param {EventEmitter<any>}  nbpOnSelection
         */
        this.nbpOnSelection = new EventEmitter();
        /** larghezza degli anelli */
        this.nbpBarWidth = 15;
        /** spaziatura tra gli anelli */
        this.nbpBarSpacing = 5;
        this._bars = [];
        this._padding = 15;
        this._footerHeight = 10;
    }
    NbpBarChartComponent.prototype.ngOnInit = function () {
        this.updateSize();
    };
    NbpBarChartComponent.prototype.ngOnChanges = function (changes) {
        var _this = this;
        this.updateSize();
        var initialAngle = 0;
        // TODO rewrite in more functional style
        this.nbpData.barGroups.forEach(function (barGroup, barGroupIndex) {
            barGroup.bars.forEach(function (bar, barIndex) {
                var stackOnValue = 0;
                if (barIndex > 0) {
                    stackOnValue += barGroup.bars[barIndex - 1].value;
                }
                if (stackOnValue > bar.max) {
                    stackOnValue = bar.max;
                }
                var value = bar.value;
                if (stackOnValue + value > bar.max) {
                    value = bar.max - stackOnValue;
                }
                var barView = {
                    id: bar.id,
                    label: bar.label,
                    color: bar.color,
                    value: value,
                    stackOnValue: stackOnValue,
                    path: '',
                    r: 0,
                    lane: barGroupIndex
                };
                _this._bars.push(barView);
            });
        });
        this._bars.forEach(function (bar, index) {
            bar.r = _this._externalRadius - (_this.nbpBarWidth * bar.lane) - (_this.nbpBarSpacing * bar.lane);
            var angle = _this._chartWidth * bar.value / 100;
            var stackOn = _this._chartWidth * bar.stackOnValue / 100;
            var angleValue = initialAngle + angle + stackOn;
            bar.endx = angleValue;
            bar.endy = _this._chartCenter - bar.r;
            bar.startx = 0 + stackOn;
            bar.starty = _this._chartCenter - bar.r;
            bar.path = "M" + bar.startx + "," + bar.starty + "  L" + bar.endx + "," + bar.endy;
        });
    };
    NbpBarChartComponent.prototype.updateSize = function () {
        this._chartWidth = this.width - 2 * this._padding;
        this._chartHeight = this.height - 2 * this._padding;
        this._chartEndy = this._chartHeight - this._footerHeight; //TODO refactor naming
        this._chartCenter = Math.min(this._chartWidth / 2, this._chartEndy / 2);
        this._externalRadius = this._chartCenter - this.nbpBarWidth / 2;
    };
    NbpBarChartComponent.prototype._onAction = function (value) {
        console.log('nbpChartComponent - Emiting: nbpOnSelection', value);
        this.nbpOnSelection.emit(value);
    };
    return NbpBarChartComponent;
}());
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpBarChartComponent.prototype, "nbpSelectionLabel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpBarChartComponent.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpBarChartComponent.prototype, "height", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpBarChartComponent.prototype, "nbpData", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], NbpBarChartComponent.prototype, "testTrigger", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], NbpBarChartComponent.prototype, "nbpOnSelection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpBarChartComponent.prototype, "nbpBarWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpBarChartComponent.prototype, "nbpBarSpacing", void 0);
NbpBarChartComponent = __decorate([
    Component({
        selector: 'nbp-bar-chart',template: "<div class=\"nbp-ring-chart\"><h3 class=\"center-title\">{{nbpData.title}}</h3><svg viewBox=\"0 0 300 60\" [attr.width]=\"'300'\" [attr.height]=\"'100%'\"><svg:path *ngFor=\"let bar of _bars\" [attr.d]=\"bar.path\" [style.stroke]=\"bar.color\" [style.stroke-width]=\"nbpBarWidth\" style=\"fill:none;\"/><svg:g [attr.transform]=\"'translate('+_chartCenter+' '+_chartCenter+')'\" (click)=\"_onAction('Default')\"></svg:g><svg:g [attr.transform]=\"'translate(0 '+_chartEndy+')'\"></svg:g></svg><h3 *ngFor=\"let header of nbpData.headers\" class=\"summary-text\"><span *ngIf=\"header.content\" [innerHTML]=\"header.content\"></span></h3></div>",
        styles: [".button-icon{font-size:2em!important;color:#000;display:inline-block;vertical-align:middle}.nbp-ring-chart{width:100%;padding:10px}.svg-preserve-aspect-container{width:100%;height:100%;position:relative}.svg-preserve-aspect-canvas{display:block;width:100%;height:100%;visibility:hidden}.svg-preserve-aspect{width:100%;height:100%;left:0;position:absolute;top:0}.legend-label{font-family:sans-serif;font-size:1em}.summary-text{font-family:sans-serif;font-size:1em}.summary-value{font-weight:700}.center-title{font-size:1.2em;font-weight:700}.pointer-cursor{cursor:pointer}.center-subtitle{cursor:pointer;font-size:.8em;fill:#90ee90;font-weight:700}h3{margin-top:1px}.chart-heading{margin-top:5px;margin-bottom:15px} /*# sourceMappingURL=nbp-ring-chart.component.css.map */ "],
        providers: [NbpChartService]
    }),
    __metadata("design:paramtypes", [])
], NbpBarChartComponent);
export { NbpBarChartComponent };
