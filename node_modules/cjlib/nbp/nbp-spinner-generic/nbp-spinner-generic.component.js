var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Component, Input, ViewChild } from '@angular/core';
// import { TooltipComponent } from '../tooltip/tooltip.component';
import { NbpSize } from './../../nbp/nbp-commons/nbp-commons.enums';
import { NbpTooltipComponent } from './../../nbp/nbp-tooltip/nbp-tooltip.component';
var NbpSpinnerGenericComponent = (function () {
    function NbpSpinnerGenericComponent() {
        this.minValue = 0;
        this.maxValue = 0;
        this.spinnerValue = 0;
        this.stepValue = 0;
        /**
       * Booleano che indica se mostrare icona e tooltip nell'intestazione del componente
       */
        this.showHelpTooltip = false;
        /**
         * (Opzionale) Enum che definisce il la posizione del tooltip rispetto all’oggetto al quale è ancorato:
         * “Top” | “Right” | “Bottom” | “Left” | “Top-Left” | “Top-Right” | “Bottom-Left” | “Bottom-Right”
         * Default: “Top”
         */
        this.tooltipHelpPosition = 'Top';
        /**
         * Proprietà che definisce la grandezza del tooltip, tramite l'enum NbpSize
         * valore di default: NbpSize.SM
         */
        this.tooltipHelpSize = NbpSize.MD;
        /**
         * Stringa che definisce la classe dell'icona da mostrare
         */
        this.tooltipHelpIcon = 'icomoon-Simboli_Risorsa-1';
        /**
         * Proprietà che definisce la grandezza del tooltip, tramite l'enum NbpSize
         * valore di default: NbpSize.SM
         */
        this.tooltipLeftSize = NbpSize.MD;
        /**
         * Proprietà che definisce la grandezza del tooltip, tramite l'enum NbpSize
         * valore di default: NbpSize.SM
         */
        this.tooltipRightSize = NbpSize.MD;
        this.toggleValidationMessage = false;
        this.errorMessage = 'Testo custom di errore';
        this.required = true;
        this.disabled = false;
    }
    NbpSpinnerGenericComponent.prototype._onSubtractClick = function (num) {
        if (this.spinnerValue == null || this.spinnerValue == undefined || String(this.spinnerValue).trim() == "") {
            this.spinnerValue = 0;
        }
        if (Number(this.spinnerValue) == NaN)
            return;
        this.spinnerValue = Number(this.spinnerValue);
        this.spinnerValue = this.spinnerValue - this.stepValue;
        if (this.spinnerValue <= this.minValue) {
            this.spinnerValue = this.minValue;
            this.tooltipLeft._open();
        }
    };
    NbpSpinnerGenericComponent.prototype._onAddClick = function (num) {
        if (this.spinnerValue == null || this.spinnerValue == undefined || String(this.spinnerValue).trim() == "") {
            this.spinnerValue = 0;
        }
        if (Number(this.spinnerValue) == NaN)
            return;
        this.spinnerValue = Number(this.spinnerValue);
        this.spinnerValue = this.spinnerValue + this.stepValue;
        if (this.spinnerValue >= this.maxValue) {
            this.spinnerValue = this.maxValue;
            this.tooltipRight._open();
        }
    };
    NbpSpinnerGenericComponent.prototype.checkSpinnerValue = function () {
        var _this = this;
        setTimeout(function () {
            if (_this.spinnerValue > _this.maxValue) {
                _this.spinnerValue = _this.maxValue;
                _this.tooltipRight._open();
            }
            else if (_this.spinnerValue < _this.minValue) {
                _this.spinnerValue = _this.minValue;
                _this.tooltipLeft._open();
            }
        }, 0);
    };
    NbpSpinnerGenericComponent.prototype.ngOnInit = function () {
        this.runIE = this.detectIE();
        //this.tooltipHelpPosition = "Bottom-Left"
    };
    NbpSpinnerGenericComponent.prototype.detectIE = function () {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE ');
        if (msie > 0) {
            return true;
        }
        var trident = ua.indexOf('Trident/');
        if (trident > 0) {
            return true;
        }
        return false;
    };
    return NbpSpinnerGenericComponent;
}());
__decorate([
    ViewChild('tooltipLeft'),
    __metadata("design:type", NbpTooltipComponent)
], NbpSpinnerGenericComponent.prototype, "tooltipLeft", void 0);
__decorate([
    ViewChild('tooltipRight'),
    __metadata("design:type", NbpTooltipComponent)
], NbpSpinnerGenericComponent.prototype, "tooltipRight", void 0);
__decorate([
    Input('label'),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "labelSpinner", void 0);
__decorate([
    Input('min'),
    __metadata("design:type", Number)
], NbpSpinnerGenericComponent.prototype, "minValue", void 0);
__decorate([
    Input('max'),
    __metadata("design:type", Number)
], NbpSpinnerGenericComponent.prototype, "maxValue", void 0);
__decorate([
    Input('value'),
    __metadata("design:type", Object)
], NbpSpinnerGenericComponent.prototype, "spinnerValue", void 0);
__decorate([
    Input('step'),
    __metadata("design:type", Number)
], NbpSpinnerGenericComponent.prototype, "stepValue", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], NbpSpinnerGenericComponent.prototype, "showHelpTooltip", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "tooltipHelpPosition", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "tooltipHelpVisibility", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "tooltipHelpText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSpinnerGenericComponent.prototype, "tooltipHelpSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "tooltipHelpIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "tooltipLeftText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSpinnerGenericComponent.prototype, "tooltipLeftSize", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], NbpSpinnerGenericComponent.prototype, "tooltipRightText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], NbpSpinnerGenericComponent.prototype, "tooltipRightSize", void 0);
NbpSpinnerGenericComponent = __decorate([
    Component({
        selector: 'nbp-spinner-generic',
        template: "<nbp-input-container nbpLabel=\"{{labelSpinner}}\"><div style=\"display: inline-flex;\"><div class=\"spinner-container\" [ngStyle]=\"{'width': showHelpTooltip ? '80%' : '100%' }\"><button class=\"spinner-button left\" (click)=\"_onSubtractClick($event)\" [disabled]=\"spinnerValue <= minValue || disabled\"><span class=\"icomoon-Simboli_Risorsa-27 icon-spinner\"></span></button> <span class=\"spinner-tooltip-left\"><nbp-tooltip #tooltipLeft [nbpVisibilityStrategy]=\"'click'\" [nbpSize]=\"tooltipLeftSize\" [nbpText]=\"tooltipLeftText\"></nbp-tooltip></span><input (ngModelChange)=\"checkSpinnerValue()\" name=\"spinnerValue\" class=\"spinner-input\" [(ngModel)]=\"spinnerValue\" [min]=\"minValue\" [max]=\"maxValue\" autocomplete=\"off\"> <span class=\"spinner-tooltip-right\"><nbp-tooltip #tooltipRight [nbpVisibilityStrategy]=\"'click'\" [nbpSize]=\"tooltipRightSize\" [nbpText]=\"tooltipRightText\"></nbp-tooltip></span><button class=\"spinner-button right\" (click)=\"_onAddClick($event)\" [disabled]=\"spinnerValue >= maxValue || disabled\"><span class=\"icomoon-Simboli_Risorsa-23 icon-spinner\"></span></button></div><div><nbp-tooltip style=\"display:inline-block; margin-top: 0.4em\" *ngIf=\"showHelpTooltip\" [nbpSize]=\"tooltipHelpSize\" [nbpPosition]=\"tooltipHelpPosition\" [nbpVisibilityStrategy]=\"tooltipHelpVisibility\" [nbpText]=\"tooltipHelpText\"><span class=\"{{tooltipHelpIcon}}\" style=\"font-size:30px; margin-left:10px;\" [ngStyle]=\"{'vertical-align': !runIE ? 'middle' : '' }\"></span></nbp-tooltip></div></div></nbp-input-container>",
        styles: [":host(.ng-dirty.ng-invalid.nbp-show-validation) .spinner-container{background-color:#fff;border:2px solid #c63200;border-radius:2px}.spinner-tooltip-left{position:relative;left:-12px;top:-30px}.spinner-tooltip-right{position:relative;right:-12px;top:-30px}.spinner-container{display:inline-flex;background-color:#fff;border:1px solid #323232;border-radius:2px;padding:4px;height:50px}.spinner-container:disabled{background-color:#ccc}.spinner-container .spinner-button{width:30px;height:40px;background-color:#258900;color:#fff;border:none;border-radius:2px;padding:0;padding-bottom:2px}.spinner-container .spinner-button:disabled{opacity:.5}.spinner-container .spinner-button.left{float:left}.spinner-container .spinner-button.right{float:right}.spinner-container .spinner-input{width:calc(100% - 60px);border:none;height:40px;text-align:center;font-size:1em;color:#323232}.spinner-container .spinner-input ::-ms-clear{display:none}.spinner-container .spinner-input ::-webkit-inner-spin-button,.spinner-container .spinner-input ::-webkit-outer-spin-button{-webkit-appearance:none;margin:0}.icon-spinner{vertical-align:middle}:host-context(.contrasto-on) :host(.ng-dirty.ng-invalid.nbp-show-validation) .spinner-container{background-color:#fff;border-color:#000}:host-context(.contrasto-on) .spinner-container{background-color:#fff;border-color:#000}:host-context(.contrasto-on) .spinner-container:disabled{background-color:#000;color:#fff}:host-context(.contrasto-on) .spinner-container .spinner-button{background-color:#000;color:#fff;padding-bottom:2px}:host-context(.contrasto-on) .spinner-container .spinner-button:disabled{background-color:#fff;color:#000}:host-context(.contrasto-on) .spinner-container .spinner-input{color:#000} /*# sourceMappingURL=nbp-spinner-generic.component.css.map */ "],
    }),
    __metadata("design:paramtypes", [])
], NbpSpinnerGenericComponent);
export { NbpSpinnerGenericComponent };
