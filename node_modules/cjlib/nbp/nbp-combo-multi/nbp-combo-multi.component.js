var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { NbpComboComponent } from '../nbp-combo/nbp-combo.component';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS, NG_ASYNC_VALIDATORS } from '@angular/forms';
import { forwardRef, ChangeDetectionStrategy, Optional, Inject, ChangeDetectorRef, Injector, ElementRef, Component, Input, ViewChild } from '@angular/core';
import { NbpInputElementBase } from '../nbp-commons/nbp-input-element-base';
import { NbpFormatterService } from '../../utility/nbp-formatter.service';
import { NbpFormContainerComponent } from '../nbp-form-container/nbp-form-container.component';
import { getPropertyValueByPath, coerceBooleanProperty } from '../../utility/lib-utility';
import { NbpCheckboxComponent } from '../nbp-checkbox/nbp-checkbox.component';
/**
 * Provider Expression that allows nbp-combo-multi to register as a ControlValueAccessor.
 * This allows it to support [(ngModel)].
 * @docs-private
 */
export var NBP_COMBO_MULTI_CONTROL_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef(function () { return NbpComboMultiComponent; }),
    multi: true
};
export var NBP_INPUT_MULTI_ELEMENT_BASE = {
    provide: NbpInputElementBase,
    useExisting: forwardRef(function () { return NbpComboMultiComponent; }),
    multi: true
};
var NbpComboMultiComponent = (function (_super) {
    __extends(NbpComboMultiComponent, _super);
    function NbpComboMultiComponent(validatori, asyncValidatori, parentFormContainer, formatterService, element, inj, cd) {
        var _this = _super.call(this, validatori, asyncValidatori, parentFormContainer, formatterService, element, inj, cd) || this;
        _this._multi = true;
        _super.prototype.initPolyfillScroll.call(_this);
        return _this;
    }
    Object.defineProperty(NbpComboMultiComponent.prototype, "nbpBindKeyField", {
        get: function () {
            return this._nbpBindKeyField;
        },
        set: function (value) {
            this._nbpBindKeyField = coerceBooleanProperty(value);
        },
        enumerable: true,
        configurable: true
    });
    NbpComboMultiComponent.prototype._canMoveOrSearch = function () {
        return this.disabled || !this._dropdownVisible;
    };
    NbpComboMultiComponent.prototype._searchByKey = function (event) {
        var _this = this;
        if (this._canMoveOrSearch()) {
            return;
        }
        console.log(event.key);
        if (this._isAlphaNumericCharacter(event.keyCode)) {
            var currentSelection = void 0;
            var listByKey_1;
            if (this.nbpViewField) {
                listByKey_1 = this._nbpShadowData.filter(function (item) {
                    var _startWithCode = !item.emptyValue ? getPropertyValueByPath(item, _this.nbpViewField)
                        .toLowerCase().trim().startsWith(event.key.toLowerCase()) : false;
                    return _startWithCode;
                });
            }
            else {
                this._nbpShadowData.findIndex(function (item) { return item === _this.value; });
                listByKey_1 = this._nbpShadowData.filter(function (item) {
                    var _startWithCode = item ? item.toLowerCase().trim().startsWith(event.key.toLowerCase()) : null;
                    return _startWithCode;
                });
            }
            currentSelection = (listByKey_1 && listByKey_1.length > 0) ? this._nbpShadowData.findIndex(function (item) { return listByKey_1[0] === item; }) : null;
            if (currentSelection !== null) {
                this.scrollToSelectedIndex(currentSelection);
                this._preSelectedElementIndex = currentSelection;
            }
        }
    };
    NbpComboMultiComponent.prototype._moveNext = function (event) {
        if (this._canMoveOrSearch()) {
            return;
        }
        event.preventDefault();
        var currentSelection = this._preSelectedElementIndex !== null && this._preSelectedElementIndex !== undefined ?
            this._preSelectedElementIndex : (this.nbpShowEmptyValue) ? 0 : -1;
        var nextSelection = currentSelection + 1;
        if (nextSelection >= this._nbpShadowData.length) {
            nextSelection = currentSelection;
        }
        this.scrollToSelectedIndex(nextSelection);
        this._preSelectedElementIndex = nextSelection;
    };
    NbpComboMultiComponent.prototype._onSelectByKeyboard = function (event) {
        event.preventDefault();
        this._onSelectEvent(this._nbpShadowData[this._preSelectedElementIndex]);
    };
    NbpComboMultiComponent.prototype._movePrev = function (event) {
        if (this._canMoveOrSearch()) {
            return;
        }
        event.preventDefault();
        var currentSelection = this._preSelectedElementIndex !== null && this._preSelectedElementIndex !== undefined ?
            this._preSelectedElementIndex : 0;
        var nextSelection = currentSelection < 0 ? 0 : currentSelection - 1;
        if (nextSelection < 0) {
            nextSelection = currentSelection;
        }
        this.scrollToSelectedIndex(nextSelection);
        this._preSelectedElementIndex = nextSelection;
    };
    NbpComboMultiComponent.prototype._isOptionPreselected = function (item) {
        var currentPreSelection = this._nbpShadowData.findIndex(function (element) { return element === item; });
        return currentPreSelection === this._preSelectedElementIndex;
    };
    NbpComboMultiComponent.prototype.findFullElementFromDSData = function (selectedElement) {
        var _this = this;
        var fullElements = this._nbpShadowData.filter(function (element) {
            return getPropertyValueByPath(element, _this.nbpKeyField) === selectedElement;
        });
        if (fullElements.length === 1) {
            return fullElements[0];
        }
        return;
    };
    NbpComboMultiComponent.prototype._getViewValue = function (valueArray) {
        if (!valueArray) {
            return this._formatViewValueLabel(0);
        }
        else if (valueArray && valueArray.length === 1) {
            if (this.nbpBindKeyField && this.nbpKeyField) {
                var tmpViewValue_1 = this.findFullElementFromDSData(valueArray[0]);
                if (tmpViewValue_1) {
                    return this.formatterService.displayValueTransformation(getPropertyValueByPath(tmpViewValue_1, this.nbpViewField), this.nbpFilter, this.nbpFilterArg);
                }
                return;
            }
            var tmpViewValue = this.nbpViewField ? getPropertyValueByPath(valueArray[0], this.nbpViewField) : valueArray[0];
            return this.formatterService.displayValueTransformation(tmpViewValue, this.nbpFilter, this.nbpFilterArg);
        }
        return this._formatViewValueLabel(valueArray.length);
    };
    NbpComboMultiComponent.prototype._formatViewValueLabel = function (numberOfSelectedItems) {
        return numberOfSelectedItems + ' Selezionati';
    };
    NbpComboMultiComponent.prototype._getModelValue = function (item) {
        return this._getUpdatedValueAfterSelectionChange(item);
    };
    NbpComboMultiComponent.prototype._getUpdatedValueAfterSelectionChange = function (item) {
        var currentValueArray = this.value;
        currentValueArray = !currentValueArray ? [] : currentValueArray;
        var valueArray = [];
        if (item == null || (item && item.emptyValue)) {
            return [];
        }
        var element = (this.nbpBindKeyField && this.nbpKeyField) ? getPropertyValueByPath(item, this.nbpKeyField) : item;
        if (this.isOptionInSelectedArray(item)) {
            var currentSelectionIndex = currentValueArray.findIndex(function (arrayItem) {
                return arrayItem === element;
            });
            if (currentSelectionIndex !== -1) {
                valueArray = currentValueArray.slice();
                valueArray.splice(currentSelectionIndex, 1);
            }
        }
        else {
            valueArray = currentValueArray.slice();
            // valueArray = !valueArray ? [] : valueArray;
            if (element !== "") {
                valueArray.push(element);
            }
        }
        return valueArray;
    };
    NbpComboMultiComponent.prototype._manageDropdownState = function (event) {
        switch (event.key.toLowerCase()) {
            case 'enter':
                event.preventDefault();
                this._dropdownVisible = !this._dropdownVisible;
                break;
            case 'tab':
                if (this._dropdownVisible) {
                    event.preventDefault();
                    this._onPreSelectEvent("");
                }
                this._dropdownVisible = false;
                break;
            default:
                this._dropdownVisible = false;
                break;
        }
        if (!this._dropdownVisible) {
            this._preSelectedElementIndex = null;
        }
    };
    NbpComboMultiComponent.prototype._onInputClick = function (event) {
        _super.prototype._onInputClick.call(this, event);
        if (!this._dropdownVisible) {
            this._preSelectedElementIndex = null;
        }
    };
    NbpComboMultiComponent.prototype._showCheckbox = function (item) {
        var returnValue;
        if (this._multi) {
            var isObject = this.nbpKeyField || this.nbpViewField;
            if (isObject) {
                returnValue = !item.emptyValue;
            }
            else {
                returnValue = !!item;
            }
        }
        else {
            returnValue = false;
        }
        return returnValue;
    };
    NbpComboMultiComponent.prototype._updateViewAndModelValues = function (item) {
        this._nbpViewValue = this._getViewModelElement(item);
        this.value = this._getModelValue(item); // TODO
    };
    NbpComboMultiComponent.prototype._sendSelectionEvents = function (item) {
        this.nbpValidation.emit(this.model);
        this.select.emit(item);
    };
    NbpComboMultiComponent.prototype._onSelectEvent = function (item, value) {
        if (value === this._isOptionSelected(item)) {
            return;
        }
        event.stopPropagation();
        this._updateViewAndModelValues(item);
        this._sendSelectionEvents(item);
    };
    NbpComboMultiComponent.prototype._getViewModelElement = function (item) {
        if (this._nbpBindKeyField) {
            return this.nbpKeyField ? this._getSelectedElement(item) : item;
        }
        return this.nbpViewField ? getPropertyValueByPath(item, this.nbpViewField) : item;
    };
    NbpComboMultiComponent.prototype._getSelectedElement = function (item) {
        var _this = this;
        var elems = this._nbpShadowData ? this._nbpShadowData.filter(function (elem) {
            return getPropertyValueByPath(elem, _this.nbpKeyField) === item;
        }) : [];
        if (elems.length > 0) {
            var selectedElem = elems[0];
            return this.nbpViewField ? getPropertyValueByPath(selectedElem, this.nbpViewField) : item;
        }
        else {
            return item;
        }
    };
    NbpComboMultiComponent.prototype.isOptionInSelectedArray = function (item) {
        var valueArray = this.value;
        var result = false;
        var element = (this.nbpBindKeyField && this.nbpKeyField) ? getPropertyValueByPath(item, this.nbpKeyField) : item;
        if (valueArray) {
            result = valueArray.some(function (currentValue) {
                return element === currentValue;
            });
        }
        else {
            result = false;
        }
        return result;
    };
    NbpComboMultiComponent.prototype._isOptionSelected = function (item) {
        if (!item || !this.value) {
            return false;
        }
        var result = this.isOptionInSelectedArray(item);
        return result;
    };
    return NbpComboMultiComponent;
}(NbpComboComponent));
__decorate([
    ViewChild('checkbox'),
    __metadata("design:type", NbpCheckboxComponent)
], NbpComboMultiComponent.prototype, "checkbox", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Boolean])
], NbpComboMultiComponent.prototype, "nbpBindKeyField", null);
NbpComboMultiComponent = __decorate([
    Component({
        selector: 'nbp-combo-multi',template: "<div class=\"dropdown-container\"><input type=\"hidden\" [(ngModel)]=\"value\"><div class=\"dropdown-inner-container\" (click)=\"_onInputClick($event)\" (keypress)=\"_searchByKey($event)\" (keydown.arrowdown)=\"_moveNext($event)\" (keydown.arrowup)=\"_movePrev($event)\" (keydown.enter)=\"_manageDropdownState($event)\" (keydown.esc)=\"_manageDropdownState($event)\" (keydown.spacebar)=\"_onSelectByKeyboard($event)\" (keydown.space)=\"_onSelectByKeyboard($event)\" (keydown.tab)=\"_manageDropdownState($event)\" (keydown.shift.tab)=\"_manageDropdownState($event)\" (keyup.shift.tab)=\"_manageDropdownState($event)\" (focus)=\"_focusActive = true;\" [ngClass]=\"{'collapse-disabled' : disabled}\" (focusout)=\"_focusActive = false; _onTouchedEvent($event)\"><input type=\"text\" [id]=\"id\" [name]=\"name\" [placeholder]=\"placeholder\" class=\"dropdown-input-box form-control\" [ngClass]=\"{ 'dropdown-input-box-green': _dropdownVisible || _focusActive, 'highlight-default':nbpHighlightedDefault, 'input-box-disabled': disabled}\" [value]=\"_getViewValue(value)\" [required]=\"required\" autocomplete=\"off\" (focus)=\"_focusActive = true;\" (focusout)=\"_focusActive = false;\" #autoFocusCombo [tabindex]=\"tabindex\"> <button class=\"dropdown-button\" [ngClass]=\"{'collapse-disabled' : disabled}\" type=\"button\" tabindex=\"-1\"><span class=\"dropdown-button-border\"></span> <span [ngClass]=\"{'triangolo-bottom' : !_dropdownVisible, 'triangolo-top' : _dropdownVisible}\"></span></button></div><ul *ngIf=\"_dropdownVisible\"><li *ngFor=\"let item of _nbpShadowData; let i = index; let last = last\" (click)=\"_onSelectEvent(item)\" [id]=\"'combo-element_'+i\" [ngClass]=\"{'active': _isOptionSelected(item), 'preselected':_isOptionPreselected(item), 'last': last }\"><nbp-checkbox #checkbox [checked]=\"_isOptionSelected(item)\" (change)=\"_onSelectEvent(item, checkbox.checked)\" *ngIf=\"_showCheckbox(item)\" nbpDisplayInline></nbp-checkbox><span>{{ _getDropDownLabel(item) }}</span></li></ul></div>",
        styles: [":host{position:relative;display:block}:host(.ng-touched.ng-invalid,.nbp-show-validation.ng-invalid) .dropdown-input-box{border:.125em solid #c63200!important;-webkit-box-shadow:inset 0 .0625em .0625em rgba(0,0,0,.075);box-shadow:inset 0 .0625em .0625em rgba(0,0,0,.075)}:host(.ng-touched.ng-invalid,.nbp-show-validation.ng-invalid) .dropdown-input-box:focus{border:.125em solid #c63200!important}:host(.ng-dirty.ng-invalid,.nbp-show-validation.ng-invalid) .dropdown-input-box{border:.125em solid #c63200!important;-webkit-box-shadow:inset 0 .0625em .0625em rgba(0,0,0,.075);box-shadow:inset 0 .0625em .0625em rgba(0,0,0,.075)}:host(.ng-dirty.ng-invalid,.nbp-show-validation.ng-invalid) .dropdown-input-box:focus{border:.125em solid #c63200!important}.highlight-default{border:.125em solid #fce07f!important;outline:0;box-shadow:none!important}.dropdown-container{display:inline-block;position:relative;width:100%}.dropdown-container ul{opacity:1;background:#fff;border-top-width:0;border-right-color:#323232;border-right-style:solid;border-right-width:.0625em;border-bottom-color:#323232;border-bottom-style:solid;border-bottom-width:.0625em;border-left-color:#323232;border-left-style:solid;border-left-width:.0625em;border-radius:0 0 .125em .125em;list-style:none;margin:0 0 .625em 0;padding:0;position:absolute;width:100%;z-index:1000;overflow-y:auto;max-height:12.8125em}.dropdown-container ul>li{cursor:pointer;min-height:3.125em;padding:.75em .625em .5em .625em;border-bottom:.0625em solid #ccc}.dropdown-container ul>li:hover{background:#c4dbbc}.dropdown-container ul>li.preselected{background:#c4dbbc}.dropdown-container ul>li.preselected.active{box-shadow:inset 0 0 1em #258900}.dropdown-container ul>li.active{background:#89bc72}.dropdown-container ul>li.last{border-bottom:none}.dropdown-container ul.ng-hide-add{transition:all ease-out .25s}.dropdown-container ul.ng-hide-remove{transition:all ease-out .25s}.dropdown-container ul.ng-hide{opacity:0;max-height:0}.dropdown-inner-container{position:relative;z-index:999}.dropdown-inner-container.collapse-disabled{pointer-events:none}.dropdown-label{color:#6f6f6f;font-size:1em;margin:0 0 0 .75em!important}.dropdown-input-box{margin:0;border-collapse:separate;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;padding:.625em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis;color:#323232;border:.0625em solid #323232;border-radius:.125em;font-size:1em!important;height:3.125em}.dropdown-input-box:focus{border:.125em solid #89bc72;outline:0;box-shadow:none!important}.dropdown-input-box::-ms-clear{display:none}.dropdown-input-box:disabled{background-color:#fff!important;cursor:default;box-shadow:none}.dropdown-input-box.input-box-disabled{background-color:#fff!important;border:.0625em solid #6f6f6f;opacity:.5!important;cursor:not-allowed}.dropdown-input-box-green{border:.125em solid #89bc72;outline:0;box-shadow:none!important}.dropdown-input-box-disabled{background-color:#fff!important;opacity:.5!important}.dropdown-button{display:table;position:absolute;top:0;right:0;width:2.5em;height:3.125em;text-align:center;color:#ccc;border-color:transparent;background-color:transparent!important}.dropdown-button span{vertical-align:middle}.dropdown-button[role=\"\"]{cursor:default;opacity:.5}.dropdown-button.collapse-disabled .dropdown-button-border{border-left:.0625em solid #6f6f6f!important}.dropdown-button.collapse-disabled .triangolo-bottom{border-style:solid;border-width:.5em .40625em;border-color:#6f6f6f transparent transparent transparent}.dropdown-button.collapse-disabled .triangolo-top{border-style:solid;border-width:0 .40625em .5em .40625em;border-color:transparent transparent #6f6f6f transparent}@media all and (-ms-high-contrast:none),(-ms-high-contrast:active){.dropdown-button span{position:absolute}.dropdown-button.collapse-disabled .triangolo-top{transform:translateY(-50%);top:50%}.dropdown-button.collapse-disabled .triangolo-bottom{transform:translateY(-50%);top:50%}.triangolo-top{transform:translateY(-50%);top:50%}.triangolo-bottom{transform:translateY(-50%);top:50%}}.dropdown-button-border{position:absolute;display:inline-block;height:60%;top:20%;left:0;border-left:.0625em solid #323232}.has-error .dropdown-input-box{border:.125em solid #c63200;-webkit-box-shadow:inset 0 .0625em .0625em rgba(0,0,0,.075);box-shadow:inset 0 .0625em .0625em rgba(0,0,0,.075)}.has-error .dropdown-input-box:focus{border:.125em solid #c63200}.dropdown-error-message{color:#c63200;font-size:1em;margin-top:.625em;margin-bottom:.625em;opacity:1}.dropdown-error-message.ng-hide-add{transition:all ease-out .25s}.dropdown-error-message.ng-hide-remove{transition:all ease-out .25s}.dropdown-error-message.ng-hide{opacity:0;margin-top:-.625em}.triangolo-top{width:0;height:0;border-style:solid;border-width:0 .625em .625em .625em;border-color:transparent transparent #258900 transparent;display:inline-block!important}.triangolo-bottom{width:0;height:0;border-style:solid;border-width:.625em .625em 0 .625em;border-color:#258900 transparent transparent transparent;display:inline-block!important}.yellow-border{border:.125em solid #fce07f}:host-context(.contrasto-on) :host(.ng-invalid.nbp-show-validation) .dropdown-input-box{border-color:#000!important}:host-context(.contrasto-on) :host(.ng-invalid.nbp-show-validation) .dropdown-input-box:focus{border-color:#000!important}:host-context(.contrasto-on) .highlight-default{border-color:#000!important}:host-context(.contrasto-on) .dropdown-container ul{background:#fff;border-right-color:#000;border-bottom-color:#000;border-left-color:#000}:host-context(.contrasto-on) .dropdown-container ul>li{border-bottom-color:#fff}:host-context(.contrasto-on) .dropdown-container ul>li:hover{background:#000;color:#fff}:host-context(.contrasto-on) .dropdown-container ul>li.active{background:#000;color:#fff}:host-context(.contrasto-on) .dropdown-label{color:#000}:host-context(.contrasto-on) .dropdown-input-box{color:#000;border-color:#000}:host-context(.contrasto-on) .dropdown-input-box:focus{border-color:#000}:host-context(.contrasto-on) .dropdown-input-box:disabled{background-color:#fff!important}:host-context(.contrasto-on) .dropdown-input-box.input-box-disabled{background-color:#fff!important;border-color:#000}:host-context(.contrasto-on) .dropdown-input-box-green{border-color:#000}:host-context(.contrasto-on) .dropdown-input-box-disabled{background-color:#fff!important}:host-context(.contrasto-on) .dropdown-button{color:#000}:host-context(.contrasto-on) .dropdown-button.collapse-disabled .dropdown-button-border{border-left-color:#000!important}:host-context(.contrasto-on) .dropdown-button.collapse-disabled .triangolo-bottom{border-top-color:#000}:host-context(.contrasto-on) .dropdown-button.collapse-disabled .triangolo-top{border-bottom-color:#000}:host-context(.contrasto-on) .dropdown-button-border{border-left-color:#000}:host-context(.contrasto-on) .has-error .dropdown-input-box{border-color:#000}:host-context(.contrasto-on) .has-error .dropdown-input-box:focus{border-color:#000}:host-context(.contrasto-on) .dropdown-error-message{color:#000}:host-context(.contrasto-on) .triangolo-top{border-bottom-color:#000}:host-context(.contrasto-on) .triangolo-bottom{border-top-color:#000}:host-context(.contrasto-on) .yellow-border{border-color:#fff} /*# sourceMappingURL=nbp-combo-multi.component.css.map */ "],
        viewProviders: [NbpFormatterService],
        providers: [NBP_COMBO_MULTI_CONTROL_VALUE_ACCESSOR, NBP_INPUT_MULTI_ELEMENT_BASE],
        changeDetection: ChangeDetectionStrategy.OnPush
        // animations: [
        // trigger('dropdownAnimationState', [
        //     state('expanded', style({ opacity: 1, visibility: 'visible', display: 'block' })),
        //     state('collapsed, void', style({ opacity: 0, visibility: 'hidden', display: 'none' })),
        //     transition('expanded => collapsed', animate('100ms ease-in')),
        //     transition('collapsed => expanded', animate('100ms ease-out'))])
        // ]
    }),
    __param(0, Optional()), __param(0, Inject(NG_VALIDATORS)),
    __param(1, Optional()), __param(1, Inject(NG_ASYNC_VALIDATORS)),
    __param(2, Optional()),
    __metadata("design:paramtypes", [Array, Array, NbpFormContainerComponent,
        NbpFormatterService,
        ElementRef, Injector, ChangeDetectorRef])
], NbpComboMultiComponent);
export { NbpComboMultiComponent };
