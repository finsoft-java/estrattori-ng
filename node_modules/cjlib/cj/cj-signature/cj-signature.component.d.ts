import { EventEmitter, OnInit, OnDestroy } from '@angular/core';
import { ISignatureDatasource } from './../cj-signature-datasource/cj-signature-datasource.interfaces';
import { ICustomerInfo } from './../../nbp/nbp-commons/nbp-commons.interface';
import { ISignatureData } from './cj-signature.interfaces';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/concatMap';
import 'rxjs/add/operator/startWith';
import 'rxjs/add/operator/mergeMapTo';
import 'rxjs/add/observable/timer';
export declare class CjSignatureComponent implements OnInit, OnDestroy {
    /**
     * Datasource per recuperare l'XML per le firme di tipo FEA e FDR
     * ed eseguire il polling per verificare lo stato della firma
     */
    cjSignatureDatasource: ISignatureDatasource;
    /**
     * Struttura dati contenente le info relative alla firma
     * - Descrizione: enum SignDescription
     *   - ALTRO = 0,
     *   - ALTRO_REMOTA,
     *   - CARTACEA,
     *   - DIGITALE_REMOTA,
     *   - GRAFOMETRICA
     *
     * - Tipo di firma: enum SignType
     *   - CARTA - Firma Cartacea
     *   - FEA   - Firma Elettronica Avanzata
     *   - FDR   - Firma Digitale Remota
     */
    cjSignType: ISignatureData;
    /**
     * Dati del cliente impegnato nella firma dei documenti
     */
    cjCustomerInfo: ICustomerInfo;
    private _secondActivation;
    /**
     * Comunica al componente che è la seconda attivazione del processo di firma
     * per l'XMLToSign.
     * NOTA: così non sarà chiamato il metodo PrintContract dello SPILayerMulticanale
     */
    cjSecondActivation: boolean;
    /**
     * Evento emesso al click del pulsante per il riavvio del Tablet
     * @param {EventEmitter<any>} cjOnRiavviaTablet
     */
    cjOnRiavviaTablet: EventEmitter<any>;
    /**
     * Evento emesso in caso di click del pulsante di ErrorAdvice
     * @param {EventEmitter<any>} cjOnErrorAdvise
     */
    cjOnErrorAdvise: EventEmitter<any>;
    /**
     * Evento emesso in caso di firma cartacea e click del pulsante 'Firma Completata'
     * @param {EventEmitter<any>} cjOnPaperSignCompleted
     */
    cjOnPaperSignConfirmed: EventEmitter<any>;
    /**
     * Evento emesso quando la funzione checkSignatureStatus del
     * datasource ritorna TRUE
     * @param {EventEmitter<any>} cjOnSignProcedureEnded
     */
    cjOnSignProcedureEnded: EventEmitter<any>;
    _xmlToSign: string;
    _signatureStatus: boolean;
    pollingSubscription: any;
    xmlSubscription: any;
    constructor();
    ngOnInit(): void;
    ngOnDestroy(): void;
    private unsubscribeObservable(name);
    private pollingFunction();
    _onPaperSignConfirmed(): void;
    _onSignStarted(result: boolean): void;
    _onRiavviaTablet(): void;
    _onErrorAdvise(): void;
}
