import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/mergeMap';
/**
 * Service used to trigger downloads of files.
 * @example
 * downloadService.download(`data:text/plain;base64,ZXhhbXBsZQ==`, '1.txt')
 *                .subscribe();
 * @example
 * httpClient.get('https://loremflickr.com/320/240', { responseType: 'blob' })
 *           .mergeMap(res => downloadService.download(res, '1.jpg'))
 *           .subscribe();
 */
export declare class DownloadService {
    /**
     * Download an ArrayBuffer, a Blob, or a data URL.
     * @param toDownload The object to download.
     * @param filename   An optional default filename.
     * @param mime       An optional mime type hint.
     * @returns An Observable which completes when the download is triggered.
     */
    download(toDownload: ArrayBuffer | Blob | string, filename?: string, mime?: string): Observable<string>;
    /**
     * Create a blob from an ArrayBuffer, a Blob, or a data URL.
     * @param arg      The object to convert to a blob.
     * @param mimeType An optional mime type hint.
     */
    private createBlob(arg, mimeType?);
    /**
     * Create a Blob, given a data URL.
     * This function is called only on IE.
     * @param dataURL The data URL to process.
     */
    private decodeDataURL(dataURL);
    /**
     * Create a data URL from a Blob.
     * The FileReader API is supported by all major browsers.
     * https://caniuse.com/#feat=filereader
     * @param blob The Blob to be data-URL-encoded.
     */
    private createDataURLFromBlob(blob);
    /**
     * Trigger the download of a data URL.
     * This method is usable only on Firefox / Chrome
     * @param dataURL  The data URL to download.
     * @param filename An optional filename hint.
     */
    private downloadDataURL(dataURL, filename?);
}
