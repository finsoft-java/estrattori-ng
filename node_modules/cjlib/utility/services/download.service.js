var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/observable/of';
import 'rxjs/add/operator/mergeMap';
/**
 * Service used to trigger downloads of files.
 * @example
 * downloadService.download(`data:text/plain;base64,ZXhhbXBsZQ==`, '1.txt')
 *                .subscribe();
 * @example
 * httpClient.get('https://loremflickr.com/320/240', { responseType: 'blob' })
 *           .mergeMap(res => downloadService.download(res, '1.jpg'))
 *           .subscribe();
 */
var DownloadService = (function () {
    function DownloadService() {
    }
    /**
     * Download an ArrayBuffer, a Blob, or a data URL.
     * @param toDownload The object to download.
     * @param filename   An optional default filename.
     * @param mime       An optional mime type hint.
     * @returns An Observable which completes when the download is triggered.
     */
    DownloadService.prototype.download = function (toDownload, filename, mime) {
        var _this = this;
        var needsBlob = typeof toDownload !== 'string' || window.navigator.msSaveOrOpenBlob;
        // If we have a data URL and we are not on IE, we can already start the download.
        if (!needsBlob && typeof toDownload === 'string') {
            return this.downloadDataURL(toDownload, filename);
        }
        var blob = this.createBlob(toDownload, mime);
        // On IE, use its propietary API.
        if (window.navigator.msSaveOrOpenBlob) {
            window.navigator.msSaveOrOpenBlob(blob, filename);
            return Observable.of(null);
        }
        return this.createDataURLFromBlob(blob)
            .mergeMap(function (dataURL) { return _this.downloadDataURL(dataURL, filename); });
    };
    /**
     * Create a blob from an ArrayBuffer, a Blob, or a data URL.
     * @param arg      The object to convert to a blob.
     * @param mimeType An optional mime type hint.
     */
    DownloadService.prototype.createBlob = function (arg, mimeType) {
        if (arg instanceof ArrayBuffer) {
            return new Blob([arg], { type: mimeType });
        }
        else if (arg instanceof Blob) {
            return arg;
        }
        // We assume the string is a data URL.
        var _a = this.decodeDataURL(arg), buffer = _a.buffer, mime = _a.mime;
        return this.createBlob(buffer, mime);
    };
    /**
     * Create a Blob, given a data URL.
     * This function is called only on IE.
     * @param dataURL The data URL to process.
     */
    DownloadService.prototype.decodeDataURL = function (dataURL) {
        var byteString = atob(dataURL.split(',')[1]), mime = dataURL.split(',')[0].split(':')[1].split(';')[0], buffer = new ArrayBuffer(byteString.length), byteArray = new Uint8Array(buffer);
        for (var i = 0; i < byteString.length; i++) {
            byteArray[i] = byteString.charCodeAt(i);
        }
        return { buffer: buffer, mime: mime };
    };
    /**
     * Create a data URL from a Blob.
     * The FileReader API is supported by all major browsers.
     * https://caniuse.com/#feat=filereader
     * @param blob The Blob to be data-URL-encoded.
     */
    DownloadService.prototype.createDataURLFromBlob = function (blob) {
        var reader = new FileReader();
        return new Observable(function (observer) {
            reader.onerror = function (err) {
                observer.error(err);
            };
            reader.onload = function () {
                observer.next(reader.result);
                observer.complete();
            };
            reader.readAsDataURL(blob);
        });
    };
    /**
     * Trigger the download of a data URL.
     * This method is usable only on Firefox / Chrome
     * @param dataURL  The data URL to download.
     * @param filename An optional filename hint.
     */
    DownloadService.prototype.downloadDataURL = function (dataURL, filename) {
        var anchor = document.createElement('a');
        anchor.href = dataURL;
        anchor.download = filename || 'download';
        document.documentElement.appendChild(anchor);
        anchor.click();
        document.documentElement.removeChild(anchor);
        // For consistency with the other methods.
        return Observable.of(dataURL);
    };
    return DownloadService;
}());
DownloadService = __decorate([
    Injectable()
], DownloadService);
export { DownloadService };
