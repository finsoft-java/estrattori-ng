var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { Pipe } from '@angular/core';
var PADDING = '000000';
var NbpCurrencyPipe = (function () {
    function NbpCurrencyPipe() {
        this.DECIMAL_REGEX = /^\d*\.?\d*$/; // previous /^\d*,?\d*$/;
        // private DECIMAL_VIEW_REGEX = /^(?!0+\,00)(?=.{1,9}(\.|$))(?!0(?!\.))\d{1,3}(\.\d{3})*(,\d+)?$/;
        this.DECIMAL_VIEW_REGEX = /^(?!0+\.00)(?=.{1,9}( |$))(?!0(?! ))\d{1,3}( \d{3})*(\.\d+)?$/;
        // TODO comes from configuration settings
        this.DECIMAL_SEPARATOR = '.'; // previous ',';
        this.THOUSANDS_SEPARATOR = ' '; // previous '.';
        this.THOUSANDS_SEPARATOR_REGEX = ' '; // previous '\.';
    }
    NbpCurrencyPipe.prototype.inputIsValid = function (input) {
        return this.DECIMAL_REGEX.test(input);
    };
    NbpCurrencyPipe.prototype.viewInputIsValid = function (input) {
        return this.DECIMAL_VIEW_REGEX.test(input);
    };
    NbpCurrencyPipe.prototype.transform = function (value, fractionSize) {
        if (fractionSize === void 0) { fractionSize = 2; }
        var elemValue = (value || '').toString();
        if (!this.inputIsValid(elemValue)) {
            return elemValue;
        }
        var _a = (value || '').toString()
            .split(this.DECIMAL_SEPARATOR), integer = _a[0], _b = _a[1], fraction = _b === void 0 ? '' : _b;
        fraction = fractionSize > 0
            ? this.DECIMAL_SEPARATOR + (fraction + PADDING).substring(0, fractionSize)
            : '';
        integer = integer.replace(/\B(?=(\d{3})+(?!\d))/g, this.THOUSANDS_SEPARATOR);
        return (integer) ? integer + fraction : integer;
    };
    NbpCurrencyPipe.prototype.parse = function (value, fractionSize) {
        if (fractionSize === void 0) { fractionSize = 2; }
        if (!this.viewInputIsValid(value)) {
            return value;
        }
        var _a = (value || '').split(this.DECIMAL_SEPARATOR), integer = _a[0], _b = _a[1], fraction = _b === void 0 ? '' : _b;
        // TODO non riesco ad usare la regExp con la variabile this.THOUSANDS_SEPARATOR
        integer = integer.replace(new RegExp(this.THOUSANDS_SEPARATOR_REGEX, 'g'), '');
        // integer = integer.replace(/\./g, '');
        fraction = parseInt(fraction, 10) > 0 && fractionSize > 0
            ? this.DECIMAL_SEPARATOR + (fraction + PADDING).substring(0, fractionSize)
            : '';
        return integer + fraction;
    };
    return NbpCurrencyPipe;
}());
NbpCurrencyPipe = __decorate([
    Pipe({ name: 'nbpCurrency' })
    // export class NbpCurrencyPipe extends CurrencyPipe {
    //   transform(value: any, args?: any): any {
    //     return super.transform(value, '', false, '1.2-2');
    //   }
    // }
    ,
    __metadata("design:paramtypes", [])
], NbpCurrencyPipe);
export { NbpCurrencyPipe };
