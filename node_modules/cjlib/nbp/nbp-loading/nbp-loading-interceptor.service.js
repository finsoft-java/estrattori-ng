var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
import { Injectable, Optional } from '@angular/core';
import { HttpResponse, HttpErrorResponse } from '@angular/common/http';
import { NbpLoadingService } from './nbp-loading.service';
import { Observable } from 'rxjs/Observable';
import 'rxjs/add/operator/do';
import 'rxjs/add/operator/catch';
import 'rxjs/add/observable/throw';
var GlobalLoadingIdentificationService = (function () {
    function GlobalLoadingIdentificationService() {
    }
    return GlobalLoadingIdentificationService;
}());
GlobalLoadingIdentificationService = __decorate([
    Injectable()
], GlobalLoadingIdentificationService);
export { GlobalLoadingIdentificationService };
var NbpLoadingInterceptor = (function () {
    function NbpLoadingInterceptor(loadingService, globalLoadingIdentifier) {
        this.loadingService = loadingService;
        this.loadingId = globalLoadingIdentifier.identifier ? globalLoadingIdentifier.identifier : null;
    }
    NbpLoadingInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        var disableLoading = false;
        if (req && req.params.has('disableLoading')) {
            disableLoading = true;
        }
        return next
            .handle(req)
            .do(function (event) {
            if (disableLoading) {
                return;
            }
            if (event instanceof HttpResponse) {
                console.log("Http Interceptor stop loading spinner (id: " + _this.loadingId + ") ...");
                _this.loadingService.notifyLoadingSpinnerRequest(false, _this.loadingId);
            }
            else {
                console.log('Http Interceptor start loading spinner (id: ${this.loadingId}) ...');
                _this.loadingService.notifyLoadingSpinnerRequest(true, _this.loadingId);
            }
        })
            .catch(function (response) {
            if (!disableLoading && response instanceof HttpErrorResponse) {
                console.log('Http Interceptor stop loading spinner...');
                _this.loadingService.notifyLoadingSpinnerRequest(false, _this.loadingId);
            }
            return Observable.throw(response);
        });
    };
    return NbpLoadingInterceptor;
}());
NbpLoadingInterceptor = __decorate([
    Injectable(),
    __param(1, Optional()),
    __metadata("design:paramtypes", [NbpLoadingService,
        GlobalLoadingIdentificationService])
], NbpLoadingInterceptor);
export { NbpLoadingInterceptor };
