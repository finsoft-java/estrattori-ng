import { EventEmitter, ElementRef, AfterViewInit, QueryList } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
/**
 * Provider Expression che permette la registrazione come ControlValueAccessor.
 * Permette di gestire [(ngModel)].
 * @docs-private
 */
export declare const NBP_SLIDER_CONTROL_VALUE_ACCESSOR: any;
export declare class NbpSliderKeyPointsComponent implements ControlValueAccessor, AfterViewInit {
    /**
     * Implementazione interfaccia ControlValueAccessor.
     */
    writeValue(value: any): void;
    propagateChange: (_: any) => void;
    registerOnChange(fn: any): void;
    registerOnTouched(): void;
    /**
     * Identificativo univoco per l'id dello slider. Se non viene passato un valore, name viene autogenerato.
     */
    id: string;
    /**
     * Identificativo univoco per il name dello slider. Se non viene passato un valore, name viene autogenerato.
     */
    name: string;
    /**
    * Tipo di slider desiderato. Al momento è disponibile solo quello semplice.
    * Di default è il tipo 0.
    */
    type: number;
    /**
     * Valore boolean che definisce la disabilitazione del componente.
     * Di default il valore è false.
     */
    disabled: boolean;
    range: number[];
    config: any;
    keyboard: number[];
    min: number;
    max: number;
    step: number;
    limit: number;
    connect: boolean;
    behavior: any;
    /**
     * Valore iniziale dello slider.
     * Di default il valore è 0.
     */
    _sliderValue: number;
    sliderValue: number;
    /**
     * Evento al cambio di valore dello slider.
     */
    nbpChangeValue: EventEmitter<number>;
    /**
     * Reference allo slider nel DOM.
     */
    sliderRef: ElementRef;
    /**
     * I pallini pips dello slider.
     */
    noUiValues: QueryList<any>;
    constructor();
    ngAfterViewInit(): void;
    clickOnPip(currentValueTip: any, mouseEvent: any): void;
}
